/* Generated by ./src/xlat/gen.sh from ./src/xlat/madvise_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(MADV_NORMAL) || (defined(HAVE_DECL_MADV_NORMAL) && HAVE_DECL_MADV_NORMAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_NORMAL) == (0), "MADV_NORMAL != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_NORMAL 0
#endif
#if defined(MADV_NORMAL) || (defined(HAVE_DECL_MADV_NORMAL) && HAVE_DECL_MADV_NORMAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_NORMAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_NORMAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_NORMAL)
#endif
#if defined(MADV_RANDOM) || (defined(HAVE_DECL_MADV_RANDOM) && HAVE_DECL_MADV_RANDOM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_RANDOM) == (1), "MADV_RANDOM != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_RANDOM 1
#endif
#if defined(MADV_RANDOM) || (defined(HAVE_DECL_MADV_RANDOM) && HAVE_DECL_MADV_RANDOM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_RANDOM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_RANDOM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_RANDOM)
#endif
#if defined(MADV_SEQUENTIAL) || (defined(HAVE_DECL_MADV_SEQUENTIAL) && HAVE_DECL_MADV_SEQUENTIAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_SEQUENTIAL) == (2), "MADV_SEQUENTIAL != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_SEQUENTIAL 2
#endif
#if defined(MADV_SEQUENTIAL) || (defined(HAVE_DECL_MADV_SEQUENTIAL) && HAVE_DECL_MADV_SEQUENTIAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_SEQUENTIAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_SEQUENTIAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_SEQUENTIAL)
#endif
#if defined(MADV_WILLNEED) || (defined(HAVE_DECL_MADV_WILLNEED) && HAVE_DECL_MADV_WILLNEED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_WILLNEED) == (3), "MADV_WILLNEED != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_WILLNEED 3
#endif
#if defined(MADV_WILLNEED) || (defined(HAVE_DECL_MADV_WILLNEED) && HAVE_DECL_MADV_WILLNEED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_WILLNEED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_WILLNEED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_WILLNEED)
#endif
#if defined __alpha__
#if defined(MADV_DONTNEED) || (defined(HAVE_DECL_MADV_DONTNEED) && HAVE_DECL_MADV_DONTNEED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_DONTNEED) == (6), "MADV_DONTNEED != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_DONTNEED 6
#endif
#if defined(MADV_DONTNEED) || (defined(HAVE_DECL_MADV_DONTNEED) && HAVE_DECL_MADV_DONTNEED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_DONTNEED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_DONTNEED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_DONTNEED)
#endif
#else
#if defined(MADV_DONTNEED) || (defined(HAVE_DECL_MADV_DONTNEED) && HAVE_DECL_MADV_DONTNEED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_DONTNEED) == (4), "MADV_DONTNEED != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_DONTNEED 4
#endif
#if defined(MADV_DONTNEED) || (defined(HAVE_DECL_MADV_DONTNEED) && HAVE_DECL_MADV_DONTNEED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_DONTNEED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_DONTNEED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_DONTNEED)
#endif
#endif
#if defined(MADV_FREE) || (defined(HAVE_DECL_MADV_FREE) && HAVE_DECL_MADV_FREE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_FREE) == (8), "MADV_FREE != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_FREE 8
#endif
#if defined(MADV_FREE) || (defined(HAVE_DECL_MADV_FREE) && HAVE_DECL_MADV_FREE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_FREE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_FREE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_FREE)
#endif
#if defined(MADV_REMOVE) || (defined(HAVE_DECL_MADV_REMOVE) && HAVE_DECL_MADV_REMOVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_REMOVE) == (9), "MADV_REMOVE != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_REMOVE 9
#endif
#if defined(MADV_REMOVE) || (defined(HAVE_DECL_MADV_REMOVE) && HAVE_DECL_MADV_REMOVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_REMOVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_REMOVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_REMOVE)
#endif
#if defined(MADV_DONTFORK) || (defined(HAVE_DECL_MADV_DONTFORK) && HAVE_DECL_MADV_DONTFORK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_DONTFORK) == (10), "MADV_DONTFORK != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_DONTFORK 10
#endif
#if defined(MADV_DONTFORK) || (defined(HAVE_DECL_MADV_DONTFORK) && HAVE_DECL_MADV_DONTFORK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_DONTFORK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_DONTFORK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_DONTFORK)
#endif
#if defined(MADV_DOFORK) || (defined(HAVE_DECL_MADV_DOFORK) && HAVE_DECL_MADV_DOFORK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_DOFORK) == (11), "MADV_DOFORK != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_DOFORK 11
#endif
#if defined(MADV_DOFORK) || (defined(HAVE_DECL_MADV_DOFORK) && HAVE_DECL_MADV_DOFORK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_DOFORK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_DOFORK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_DOFORK)
#endif
#if defined(MADV_COLD) || (defined(HAVE_DECL_MADV_COLD) && HAVE_DECL_MADV_COLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_COLD) == (20), "MADV_COLD != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_COLD 20
#endif
#if defined(MADV_COLD) || (defined(HAVE_DECL_MADV_COLD) && HAVE_DECL_MADV_COLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_COLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_COLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_COLD)
#endif
#if defined(MADV_PAGEOUT) || (defined(HAVE_DECL_MADV_PAGEOUT) && HAVE_DECL_MADV_PAGEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_PAGEOUT) == (21), "MADV_PAGEOUT != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_PAGEOUT 21
#endif
#if defined(MADV_PAGEOUT) || (defined(HAVE_DECL_MADV_PAGEOUT) && HAVE_DECL_MADV_PAGEOUT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_PAGEOUT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_PAGEOUT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_PAGEOUT)
#endif
#if defined(MADV_POPULATE_READ) || (defined(HAVE_DECL_MADV_POPULATE_READ) && HAVE_DECL_MADV_POPULATE_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_POPULATE_READ) == (22), "MADV_POPULATE_READ != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_POPULATE_READ 22
#endif
#if defined(MADV_POPULATE_READ) || (defined(HAVE_DECL_MADV_POPULATE_READ) && HAVE_DECL_MADV_POPULATE_READ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_POPULATE_READ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_POPULATE_READ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_POPULATE_READ)
#endif
#if defined(MADV_POPULATE_WRITE) || (defined(HAVE_DECL_MADV_POPULATE_WRITE) && HAVE_DECL_MADV_POPULATE_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_POPULATE_WRITE) == (23), "MADV_POPULATE_WRITE != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_POPULATE_WRITE 23
#endif
#if defined(MADV_POPULATE_WRITE) || (defined(HAVE_DECL_MADV_POPULATE_WRITE) && HAVE_DECL_MADV_POPULATE_WRITE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_POPULATE_WRITE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_POPULATE_WRITE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_POPULATE_WRITE)
#endif
#if defined(MADV_DONTNEED_LOCKED) || (defined(HAVE_DECL_MADV_DONTNEED_LOCKED) && HAVE_DECL_MADV_DONTNEED_LOCKED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_DONTNEED_LOCKED) == (24), "MADV_DONTNEED_LOCKED != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_DONTNEED_LOCKED 24
#endif
#if defined(MADV_DONTNEED_LOCKED) || (defined(HAVE_DECL_MADV_DONTNEED_LOCKED) && HAVE_DECL_MADV_DONTNEED_LOCKED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_DONTNEED_LOCKED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_DONTNEED_LOCKED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_DONTNEED_LOCKED)
#endif
#if defined(MADV_HWPOISON) || (defined(HAVE_DECL_MADV_HWPOISON) && HAVE_DECL_MADV_HWPOISON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_HWPOISON) == (100), "MADV_HWPOISON != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_HWPOISON 100
#endif
#if defined(MADV_HWPOISON) || (defined(HAVE_DECL_MADV_HWPOISON) && HAVE_DECL_MADV_HWPOISON)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_HWPOISON)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_HWPOISON"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_HWPOISON)
#endif
#if defined(MADV_SOFT_OFFLINE) || (defined(HAVE_DECL_MADV_SOFT_OFFLINE) && HAVE_DECL_MADV_SOFT_OFFLINE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MADV_SOFT_OFFLINE) == (101), "MADV_SOFT_OFFLINE != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MADV_SOFT_OFFLINE 101
#endif
#if defined(MADV_SOFT_OFFLINE) || (defined(HAVE_DECL_MADV_SOFT_OFFLINE) && HAVE_DECL_MADV_SOFT_OFFLINE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MADV_SOFT_OFFLINE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MADV_SOFT_OFFLINE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MADV_SOFT_OFFLINE)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat madvise_cmds in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data madvise_cmds_xdata[] = {
 XLAT(MADV_NORMAL),
 #define XLAT_VAL_0 ((unsigned) (MADV_NORMAL))
 #define XLAT_STR_0 STRINGIFY(MADV_NORMAL)
 XLAT(MADV_RANDOM),
 #define XLAT_VAL_1 ((unsigned) (MADV_RANDOM))
 #define XLAT_STR_1 STRINGIFY(MADV_RANDOM)
 XLAT(MADV_SEQUENTIAL),
 #define XLAT_VAL_2 ((unsigned) (MADV_SEQUENTIAL))
 #define XLAT_STR_2 STRINGIFY(MADV_SEQUENTIAL)
 XLAT(MADV_WILLNEED),
 #define XLAT_VAL_3 ((unsigned) (MADV_WILLNEED))
 #define XLAT_STR_3 STRINGIFY(MADV_WILLNEED)

#if defined __alpha__
 XLAT(MADV_DONTNEED),
 #define XLAT_VAL_4 ((unsigned) (MADV_DONTNEED))
 #define XLAT_STR_4 STRINGIFY(MADV_DONTNEED)
#else
 XLAT(MADV_DONTNEED),
 #define XLAT_VAL_5 ((unsigned) (MADV_DONTNEED))
 #define XLAT_STR_5 STRINGIFY(MADV_DONTNEED)
#endif

 XLAT(MADV_FREE),
 #define XLAT_VAL_6 ((unsigned) (MADV_FREE))
 #define XLAT_STR_6 STRINGIFY(MADV_FREE)
 XLAT(MADV_REMOVE),
 #define XLAT_VAL_7 ((unsigned) (MADV_REMOVE))
 #define XLAT_STR_7 STRINGIFY(MADV_REMOVE)
 XLAT(MADV_DONTFORK),
 #define XLAT_VAL_8 ((unsigned) (MADV_DONTFORK))
 #define XLAT_STR_8 STRINGIFY(MADV_DONTFORK)
 XLAT(MADV_DOFORK),
 #define XLAT_VAL_9 ((unsigned) (MADV_DOFORK))
 #define XLAT_STR_9 STRINGIFY(MADV_DOFORK)








 XLAT(MADV_COLD),
 #define XLAT_VAL_10 ((unsigned) (MADV_COLD))
 #define XLAT_STR_10 STRINGIFY(MADV_COLD)
 XLAT(MADV_PAGEOUT),
 #define XLAT_VAL_11 ((unsigned) (MADV_PAGEOUT))
 #define XLAT_STR_11 STRINGIFY(MADV_PAGEOUT)
 XLAT(MADV_POPULATE_READ),
 #define XLAT_VAL_12 ((unsigned) (MADV_POPULATE_READ))
 #define XLAT_STR_12 STRINGIFY(MADV_POPULATE_READ)
 XLAT(MADV_POPULATE_WRITE),
 #define XLAT_VAL_13 ((unsigned) (MADV_POPULATE_WRITE))
 #define XLAT_STR_13 STRINGIFY(MADV_POPULATE_WRITE)
 XLAT(MADV_DONTNEED_LOCKED),
 #define XLAT_VAL_14 ((unsigned) (MADV_DONTNEED_LOCKED))
 #define XLAT_STR_14 STRINGIFY(MADV_DONTNEED_LOCKED)

 XLAT(MADV_HWPOISON),
 #define XLAT_VAL_15 ((unsigned) (MADV_HWPOISON))
 #define XLAT_STR_15 STRINGIFY(MADV_HWPOISON)
 XLAT(MADV_SOFT_OFFLINE),
 #define XLAT_VAL_16 ((unsigned) (MADV_SOFT_OFFLINE))
 #define XLAT_STR_16 STRINGIFY(MADV_SOFT_OFFLINE)
};
static
const struct xlat madvise_cmds[1] = { {
 .data = madvise_cmds_xdata,
 .size = ARRAY_SIZE(madvise_cmds_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
