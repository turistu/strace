/* Generated by ./src/xlat/gen.sh from ./src/xlat/term_iflags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat term_iflags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data term_iflags_xdata[] = {
#if defined(IGNBRK) || (defined(HAVE_DECL_IGNBRK) && HAVE_DECL_IGNBRK)
  XLAT(IGNBRK),
 #define XLAT_VAL_0 ((unsigned) (IGNBRK))
 #define XLAT_STR_0 STRINGIFY(IGNBRK)
#endif
#if defined(BRKINT) || (defined(HAVE_DECL_BRKINT) && HAVE_DECL_BRKINT)
  XLAT(BRKINT),
 #define XLAT_VAL_1 ((unsigned) (BRKINT))
 #define XLAT_STR_1 STRINGIFY(BRKINT)
#endif
#if defined(IGNPAR) || (defined(HAVE_DECL_IGNPAR) && HAVE_DECL_IGNPAR)
  XLAT(IGNPAR),
 #define XLAT_VAL_2 ((unsigned) (IGNPAR))
 #define XLAT_STR_2 STRINGIFY(IGNPAR)
#endif
#if defined(PARMRK) || (defined(HAVE_DECL_PARMRK) && HAVE_DECL_PARMRK)
  XLAT(PARMRK),
 #define XLAT_VAL_3 ((unsigned) (PARMRK))
 #define XLAT_STR_3 STRINGIFY(PARMRK)
#endif
#if defined(INPCK) || (defined(HAVE_DECL_INPCK) && HAVE_DECL_INPCK)
  XLAT(INPCK),
 #define XLAT_VAL_4 ((unsigned) (INPCK))
 #define XLAT_STR_4 STRINGIFY(INPCK)
#endif
#if defined(ISTRIP) || (defined(HAVE_DECL_ISTRIP) && HAVE_DECL_ISTRIP)
  XLAT(ISTRIP),
 #define XLAT_VAL_5 ((unsigned) (ISTRIP))
 #define XLAT_STR_5 STRINGIFY(ISTRIP)
#endif
#if defined(INLCR) || (defined(HAVE_DECL_INLCR) && HAVE_DECL_INLCR)
  XLAT(INLCR),
 #define XLAT_VAL_6 ((unsigned) (INLCR))
 #define XLAT_STR_6 STRINGIFY(INLCR)
#endif
#if defined(IGNCR) || (defined(HAVE_DECL_IGNCR) && HAVE_DECL_IGNCR)
  XLAT(IGNCR),
 #define XLAT_VAL_7 ((unsigned) (IGNCR))
 #define XLAT_STR_7 STRINGIFY(IGNCR)
#endif
#if defined(ICRNL) || (defined(HAVE_DECL_ICRNL) && HAVE_DECL_ICRNL)
  XLAT(ICRNL),
 #define XLAT_VAL_8 ((unsigned) (ICRNL))
 #define XLAT_STR_8 STRINGIFY(ICRNL)
#endif
#if defined(IUCLC) || (defined(HAVE_DECL_IUCLC) && HAVE_DECL_IUCLC)
  XLAT(IUCLC),
 #define XLAT_VAL_9 ((unsigned) (IUCLC))
 #define XLAT_STR_9 STRINGIFY(IUCLC)
#endif
#if defined(IXON) || (defined(HAVE_DECL_IXON) && HAVE_DECL_IXON)
  XLAT(IXON),
 #define XLAT_VAL_10 ((unsigned) (IXON))
 #define XLAT_STR_10 STRINGIFY(IXON)
#endif
#if defined(IXANY) || (defined(HAVE_DECL_IXANY) && HAVE_DECL_IXANY)
  XLAT(IXANY),
 #define XLAT_VAL_11 ((unsigned) (IXANY))
 #define XLAT_STR_11 STRINGIFY(IXANY)
#endif
#if defined(IXOFF) || (defined(HAVE_DECL_IXOFF) && HAVE_DECL_IXOFF)
  XLAT(IXOFF),
 #define XLAT_VAL_12 ((unsigned) (IXOFF))
 #define XLAT_STR_12 STRINGIFY(IXOFF)
#endif
#if defined(IMAXBEL) || (defined(HAVE_DECL_IMAXBEL) && HAVE_DECL_IMAXBEL)
  XLAT(IMAXBEL),
 #define XLAT_VAL_13 ((unsigned) (IMAXBEL))
 #define XLAT_STR_13 STRINGIFY(IMAXBEL)
#endif
#if defined(IUTF8) || (defined(HAVE_DECL_IUTF8) && HAVE_DECL_IUTF8)
  XLAT(IUTF8),
 #define XLAT_VAL_14 ((unsigned) (IUTF8))
 #define XLAT_STR_14 STRINGIFY(IUTF8)
#endif
};
static
const struct xlat term_iflags[1] = { {
 .data = term_iflags_xdata,
 .size = ARRAY_SIZE(term_iflags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
