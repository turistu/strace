/* Generated by ./src/xlat/gen.sh from ./src/xlat/v4l2_std_ids.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_B) == (((v4l2_std_id)0x00000001)), "V4L2_STD_PAL_B != ((v4l2_std_id)0x00000001)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_B1) == (((v4l2_std_id)0x00000002)), "V4L2_STD_PAL_B1 != ((v4l2_std_id)0x00000002)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_G) == (((v4l2_std_id)0x00000004)), "V4L2_STD_PAL_G != ((v4l2_std_id)0x00000004)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_H) == (((v4l2_std_id)0x00000008)), "V4L2_STD_PAL_H != ((v4l2_std_id)0x00000008)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_I) == (((v4l2_std_id)0x00000010)), "V4L2_STD_PAL_I != ((v4l2_std_id)0x00000010)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_D) == (((v4l2_std_id)0x00000020)), "V4L2_STD_PAL_D != ((v4l2_std_id)0x00000020)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_D1) == (((v4l2_std_id)0x00000040)), "V4L2_STD_PAL_D1 != ((v4l2_std_id)0x00000040)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_K) == (((v4l2_std_id)0x00000080)), "V4L2_STD_PAL_K != ((v4l2_std_id)0x00000080)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_M) == (((v4l2_std_id)0x00000100)), "V4L2_STD_PAL_M != ((v4l2_std_id)0x00000100)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_N) == (((v4l2_std_id)0x00000200)), "V4L2_STD_PAL_N != ((v4l2_std_id)0x00000200)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_Nc) == (((v4l2_std_id)0x00000400)), "V4L2_STD_PAL_Nc != ((v4l2_std_id)0x00000400)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_PAL_60) == (((v4l2_std_id)0x00000800)), "V4L2_STD_PAL_60 != ((v4l2_std_id)0x00000800)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_NTSC_M) == (((v4l2_std_id)0x00001000)), "V4L2_STD_NTSC_M != ((v4l2_std_id)0x00001000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_NTSC_M_JP) == (((v4l2_std_id)0x00002000)), "V4L2_STD_NTSC_M_JP != ((v4l2_std_id)0x00002000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_NTSC_443) == (((v4l2_std_id)0x00004000)), "V4L2_STD_NTSC_443 != ((v4l2_std_id)0x00004000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_NTSC_M_KR) == (((v4l2_std_id)0x00008000)), "V4L2_STD_NTSC_M_KR != ((v4l2_std_id)0x00008000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_B) == (((v4l2_std_id)0x00010000)), "V4L2_STD_SECAM_B != ((v4l2_std_id)0x00010000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_D) == (((v4l2_std_id)0x00020000)), "V4L2_STD_SECAM_D != ((v4l2_std_id)0x00020000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_G) == (((v4l2_std_id)0x00040000)), "V4L2_STD_SECAM_G != ((v4l2_std_id)0x00040000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_H) == (((v4l2_std_id)0x00080000)), "V4L2_STD_SECAM_H != ((v4l2_std_id)0x00080000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_K) == (((v4l2_std_id)0x00100000)), "V4L2_STD_SECAM_K != ((v4l2_std_id)0x00100000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_K1) == (((v4l2_std_id)0x00200000)), "V4L2_STD_SECAM_K1 != ((v4l2_std_id)0x00200000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_L) == (((v4l2_std_id)0x00400000)), "V4L2_STD_SECAM_L != ((v4l2_std_id)0x00400000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_SECAM_LC) == (((v4l2_std_id)0x00800000)), "V4L2_STD_SECAM_LC != ((v4l2_std_id)0x00800000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_ATSC_8_VSB) == (((v4l2_std_id)0x01000000)), "V4L2_STD_ATSC_8_VSB != ((v4l2_std_id)0x01000000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V4L2_STD_ATSC_16_VSB) == (((v4l2_std_id)0x02000000)), "V4L2_STD_ATSC_16_VSB != ((v4l2_std_id)0x02000000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat v4l2_std_ids[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data v4l2_std_ids_xdata[] = {
 XLAT(V4L2_STD_PAL_B),
 #define XLAT_VAL_0 ((unsigned) (V4L2_STD_PAL_B))
 #define XLAT_STR_0 STRINGIFY(V4L2_STD_PAL_B)
 XLAT(V4L2_STD_PAL_B1),
 #define XLAT_VAL_1 ((unsigned) (V4L2_STD_PAL_B1))
 #define XLAT_STR_1 STRINGIFY(V4L2_STD_PAL_B1)
 XLAT(V4L2_STD_PAL_G),
 #define XLAT_VAL_2 ((unsigned) (V4L2_STD_PAL_G))
 #define XLAT_STR_2 STRINGIFY(V4L2_STD_PAL_G)
 XLAT(V4L2_STD_PAL_H),
 #define XLAT_VAL_3 ((unsigned) (V4L2_STD_PAL_H))
 #define XLAT_STR_3 STRINGIFY(V4L2_STD_PAL_H)
 XLAT(V4L2_STD_PAL_I),
 #define XLAT_VAL_4 ((unsigned) (V4L2_STD_PAL_I))
 #define XLAT_STR_4 STRINGIFY(V4L2_STD_PAL_I)
 XLAT(V4L2_STD_PAL_D),
 #define XLAT_VAL_5 ((unsigned) (V4L2_STD_PAL_D))
 #define XLAT_STR_5 STRINGIFY(V4L2_STD_PAL_D)
 XLAT(V4L2_STD_PAL_D1),
 #define XLAT_VAL_6 ((unsigned) (V4L2_STD_PAL_D1))
 #define XLAT_STR_6 STRINGIFY(V4L2_STD_PAL_D1)
 XLAT(V4L2_STD_PAL_K),
 #define XLAT_VAL_7 ((unsigned) (V4L2_STD_PAL_K))
 #define XLAT_STR_7 STRINGIFY(V4L2_STD_PAL_K)
 XLAT(V4L2_STD_PAL_M),
 #define XLAT_VAL_8 ((unsigned) (V4L2_STD_PAL_M))
 #define XLAT_STR_8 STRINGIFY(V4L2_STD_PAL_M)
 XLAT(V4L2_STD_PAL_N),
 #define XLAT_VAL_9 ((unsigned) (V4L2_STD_PAL_N))
 #define XLAT_STR_9 STRINGIFY(V4L2_STD_PAL_N)
 XLAT(V4L2_STD_PAL_Nc),
 #define XLAT_VAL_10 ((unsigned) (V4L2_STD_PAL_Nc))
 #define XLAT_STR_10 STRINGIFY(V4L2_STD_PAL_Nc)
 XLAT(V4L2_STD_PAL_60),
 #define XLAT_VAL_11 ((unsigned) (V4L2_STD_PAL_60))
 #define XLAT_STR_11 STRINGIFY(V4L2_STD_PAL_60)
 XLAT(V4L2_STD_NTSC_M),
 #define XLAT_VAL_12 ((unsigned) (V4L2_STD_NTSC_M))
 #define XLAT_STR_12 STRINGIFY(V4L2_STD_NTSC_M)
 XLAT(V4L2_STD_NTSC_M_JP),
 #define XLAT_VAL_13 ((unsigned) (V4L2_STD_NTSC_M_JP))
 #define XLAT_STR_13 STRINGIFY(V4L2_STD_NTSC_M_JP)
 XLAT(V4L2_STD_NTSC_443),
 #define XLAT_VAL_14 ((unsigned) (V4L2_STD_NTSC_443))
 #define XLAT_STR_14 STRINGIFY(V4L2_STD_NTSC_443)
 XLAT(V4L2_STD_NTSC_M_KR),
 #define XLAT_VAL_15 ((unsigned) (V4L2_STD_NTSC_M_KR))
 #define XLAT_STR_15 STRINGIFY(V4L2_STD_NTSC_M_KR)
 XLAT(V4L2_STD_SECAM_B),
 #define XLAT_VAL_16 ((unsigned) (V4L2_STD_SECAM_B))
 #define XLAT_STR_16 STRINGIFY(V4L2_STD_SECAM_B)
 XLAT(V4L2_STD_SECAM_D),
 #define XLAT_VAL_17 ((unsigned) (V4L2_STD_SECAM_D))
 #define XLAT_STR_17 STRINGIFY(V4L2_STD_SECAM_D)
 XLAT(V4L2_STD_SECAM_G),
 #define XLAT_VAL_18 ((unsigned) (V4L2_STD_SECAM_G))
 #define XLAT_STR_18 STRINGIFY(V4L2_STD_SECAM_G)
 XLAT(V4L2_STD_SECAM_H),
 #define XLAT_VAL_19 ((unsigned) (V4L2_STD_SECAM_H))
 #define XLAT_STR_19 STRINGIFY(V4L2_STD_SECAM_H)
 XLAT(V4L2_STD_SECAM_K),
 #define XLAT_VAL_20 ((unsigned) (V4L2_STD_SECAM_K))
 #define XLAT_STR_20 STRINGIFY(V4L2_STD_SECAM_K)
 XLAT(V4L2_STD_SECAM_K1),
 #define XLAT_VAL_21 ((unsigned) (V4L2_STD_SECAM_K1))
 #define XLAT_STR_21 STRINGIFY(V4L2_STD_SECAM_K1)
 XLAT(V4L2_STD_SECAM_L),
 #define XLAT_VAL_22 ((unsigned) (V4L2_STD_SECAM_L))
 #define XLAT_STR_22 STRINGIFY(V4L2_STD_SECAM_L)
 XLAT(V4L2_STD_SECAM_LC),
 #define XLAT_VAL_23 ((unsigned) (V4L2_STD_SECAM_LC))
 #define XLAT_STR_23 STRINGIFY(V4L2_STD_SECAM_LC)
 XLAT(V4L2_STD_ATSC_8_VSB),
 #define XLAT_VAL_24 ((unsigned) (V4L2_STD_ATSC_8_VSB))
 #define XLAT_STR_24 STRINGIFY(V4L2_STD_ATSC_8_VSB)
 XLAT(V4L2_STD_ATSC_16_VSB),
 #define XLAT_VAL_25 ((unsigned) (V4L2_STD_ATSC_16_VSB))
 #define XLAT_STR_25 STRINGIFY(V4L2_STD_ATSC_16_VSB)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat v4l2_std_ids[1] = { {
 .data = v4l2_std_ids_xdata,
 .size = ARRAY_SIZE(v4l2_std_ids_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
