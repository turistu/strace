/* Generated by ./src/xlat/gen.sh from ./src/xlat/icmp_filter_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ICMP_ECHOREPLY) || (defined(HAVE_DECL_ICMP_ECHOREPLY) && HAVE_DECL_ICMP_ECHOREPLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_ECHOREPLY) == (0), "ICMP_ECHOREPLY != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_ECHOREPLY 0
#endif
#if defined(ICMP_DEST_UNREACH) || (defined(HAVE_DECL_ICMP_DEST_UNREACH) && HAVE_DECL_ICMP_DEST_UNREACH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_DEST_UNREACH) == (3), "ICMP_DEST_UNREACH != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_DEST_UNREACH 3
#endif
#if defined(ICMP_SOURCE_QUENCH) || (defined(HAVE_DECL_ICMP_SOURCE_QUENCH) && HAVE_DECL_ICMP_SOURCE_QUENCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_SOURCE_QUENCH) == (4), "ICMP_SOURCE_QUENCH != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_SOURCE_QUENCH 4
#endif
#if defined(ICMP_REDIRECT) || (defined(HAVE_DECL_ICMP_REDIRECT) && HAVE_DECL_ICMP_REDIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_REDIRECT) == (5), "ICMP_REDIRECT != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_REDIRECT 5
#endif
#if defined(ICMP_ECHO) || (defined(HAVE_DECL_ICMP_ECHO) && HAVE_DECL_ICMP_ECHO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_ECHO) == (8), "ICMP_ECHO != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_ECHO 8
#endif
#if defined(ICMP_TIME_EXCEEDED) || (defined(HAVE_DECL_ICMP_TIME_EXCEEDED) && HAVE_DECL_ICMP_TIME_EXCEEDED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_TIME_EXCEEDED) == (11), "ICMP_TIME_EXCEEDED != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_TIME_EXCEEDED 11
#endif
#if defined(ICMP_PARAMETERPROB) || (defined(HAVE_DECL_ICMP_PARAMETERPROB) && HAVE_DECL_ICMP_PARAMETERPROB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_PARAMETERPROB) == (12), "ICMP_PARAMETERPROB != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_PARAMETERPROB 12
#endif
#if defined(ICMP_TIMESTAMP) || (defined(HAVE_DECL_ICMP_TIMESTAMP) && HAVE_DECL_ICMP_TIMESTAMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_TIMESTAMP) == (13), "ICMP_TIMESTAMP != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_TIMESTAMP 13
#endif
#if defined(ICMP_TIMESTAMPREPLY) || (defined(HAVE_DECL_ICMP_TIMESTAMPREPLY) && HAVE_DECL_ICMP_TIMESTAMPREPLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_TIMESTAMPREPLY) == (14), "ICMP_TIMESTAMPREPLY != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_TIMESTAMPREPLY 14
#endif
#if defined(ICMP_INFO_REQUEST) || (defined(HAVE_DECL_ICMP_INFO_REQUEST) && HAVE_DECL_ICMP_INFO_REQUEST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_INFO_REQUEST) == (15), "ICMP_INFO_REQUEST != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_INFO_REQUEST 15
#endif
#if defined(ICMP_INFO_REPLY) || (defined(HAVE_DECL_ICMP_INFO_REPLY) && HAVE_DECL_ICMP_INFO_REPLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_INFO_REPLY) == (16), "ICMP_INFO_REPLY != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_INFO_REPLY 16
#endif
#if defined(ICMP_ADDRESS) || (defined(HAVE_DECL_ICMP_ADDRESS) && HAVE_DECL_ICMP_ADDRESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_ADDRESS) == (17), "ICMP_ADDRESS != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_ADDRESS 17
#endif
#if defined(ICMP_ADDRESSREPLY) || (defined(HAVE_DECL_ICMP_ADDRESSREPLY) && HAVE_DECL_ICMP_ADDRESSREPLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP_ADDRESSREPLY) == (18), "ICMP_ADDRESSREPLY != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP_ADDRESSREPLY 18
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat icmp_filter_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data icmp_filter_flags_xdata[] = {
 [ICMP_ECHOREPLY] = XLAT(ICMP_ECHOREPLY),
 #define XLAT_VAL_0 ((unsigned) (ICMP_ECHOREPLY))
 #define XLAT_STR_0 STRINGIFY(ICMP_ECHOREPLY)
 [ICMP_DEST_UNREACH] = XLAT(ICMP_DEST_UNREACH),
 #define XLAT_VAL_1 ((unsigned) (ICMP_DEST_UNREACH))
 #define XLAT_STR_1 STRINGIFY(ICMP_DEST_UNREACH)
 [ICMP_SOURCE_QUENCH] = XLAT(ICMP_SOURCE_QUENCH),
 #define XLAT_VAL_2 ((unsigned) (ICMP_SOURCE_QUENCH))
 #define XLAT_STR_2 STRINGIFY(ICMP_SOURCE_QUENCH)
 [ICMP_REDIRECT] = XLAT(ICMP_REDIRECT),
 #define XLAT_VAL_3 ((unsigned) (ICMP_REDIRECT))
 #define XLAT_STR_3 STRINGIFY(ICMP_REDIRECT)
 [ICMP_ECHO] = XLAT(ICMP_ECHO),
 #define XLAT_VAL_4 ((unsigned) (ICMP_ECHO))
 #define XLAT_STR_4 STRINGIFY(ICMP_ECHO)
 [ICMP_TIME_EXCEEDED] = XLAT(ICMP_TIME_EXCEEDED),
 #define XLAT_VAL_5 ((unsigned) (ICMP_TIME_EXCEEDED))
 #define XLAT_STR_5 STRINGIFY(ICMP_TIME_EXCEEDED)
 [ICMP_PARAMETERPROB] = XLAT(ICMP_PARAMETERPROB),
 #define XLAT_VAL_6 ((unsigned) (ICMP_PARAMETERPROB))
 #define XLAT_STR_6 STRINGIFY(ICMP_PARAMETERPROB)
 [ICMP_TIMESTAMP] = XLAT(ICMP_TIMESTAMP),
 #define XLAT_VAL_7 ((unsigned) (ICMP_TIMESTAMP))
 #define XLAT_STR_7 STRINGIFY(ICMP_TIMESTAMP)
 [ICMP_TIMESTAMPREPLY] = XLAT(ICMP_TIMESTAMPREPLY),
 #define XLAT_VAL_8 ((unsigned) (ICMP_TIMESTAMPREPLY))
 #define XLAT_STR_8 STRINGIFY(ICMP_TIMESTAMPREPLY)
 [ICMP_INFO_REQUEST] = XLAT(ICMP_INFO_REQUEST),
 #define XLAT_VAL_9 ((unsigned) (ICMP_INFO_REQUEST))
 #define XLAT_STR_9 STRINGIFY(ICMP_INFO_REQUEST)
 [ICMP_INFO_REPLY] = XLAT(ICMP_INFO_REPLY),
 #define XLAT_VAL_10 ((unsigned) (ICMP_INFO_REPLY))
 #define XLAT_STR_10 STRINGIFY(ICMP_INFO_REPLY)
 [ICMP_ADDRESS] = XLAT(ICMP_ADDRESS),
 #define XLAT_VAL_11 ((unsigned) (ICMP_ADDRESS))
 #define XLAT_STR_11 STRINGIFY(ICMP_ADDRESS)
 [ICMP_ADDRESSREPLY] = XLAT(ICMP_ADDRESSREPLY),
 #define XLAT_VAL_12 ((unsigned) (ICMP_ADDRESSREPLY))
 #define XLAT_STR_12 STRINGIFY(ICMP_ADDRESSREPLY)
};
static
const struct xlat icmp_filter_flags[1] = { {
 .data = icmp_filter_flags_xdata,
 .size = ARRAY_SIZE(icmp_filter_flags_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
