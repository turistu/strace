/* Generated by ./src/xlat/gen.sh from ./src/xlat/genl_ctrl_cmd.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat genl_ctrl_cmd in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data genl_ctrl_cmd_xdata[] = {

 [CTRL_CMD_UNSPEC] = XLAT(CTRL_CMD_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (CTRL_CMD_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(CTRL_CMD_UNSPEC)
 [CTRL_CMD_NEWFAMILY] = XLAT(CTRL_CMD_NEWFAMILY),
 #define XLAT_VAL_1 ((unsigned) (CTRL_CMD_NEWFAMILY))
 #define XLAT_STR_1 STRINGIFY(CTRL_CMD_NEWFAMILY)
 [CTRL_CMD_DELFAMILY] = XLAT(CTRL_CMD_DELFAMILY),
 #define XLAT_VAL_2 ((unsigned) (CTRL_CMD_DELFAMILY))
 #define XLAT_STR_2 STRINGIFY(CTRL_CMD_DELFAMILY)
 [CTRL_CMD_GETFAMILY] = XLAT(CTRL_CMD_GETFAMILY),
 #define XLAT_VAL_3 ((unsigned) (CTRL_CMD_GETFAMILY))
 #define XLAT_STR_3 STRINGIFY(CTRL_CMD_GETFAMILY)
 [CTRL_CMD_NEWOPS] = XLAT(CTRL_CMD_NEWOPS),
 #define XLAT_VAL_4 ((unsigned) (CTRL_CMD_NEWOPS))
 #define XLAT_STR_4 STRINGIFY(CTRL_CMD_NEWOPS)
 [CTRL_CMD_DELOPS] = XLAT(CTRL_CMD_DELOPS),
 #define XLAT_VAL_5 ((unsigned) (CTRL_CMD_DELOPS))
 #define XLAT_STR_5 STRINGIFY(CTRL_CMD_DELOPS)
 [CTRL_CMD_GETOPS] = XLAT(CTRL_CMD_GETOPS),
 #define XLAT_VAL_6 ((unsigned) (CTRL_CMD_GETOPS))
 #define XLAT_STR_6 STRINGIFY(CTRL_CMD_GETOPS)
 [CTRL_CMD_NEWMCAST_GRP] = XLAT(CTRL_CMD_NEWMCAST_GRP),
 #define XLAT_VAL_7 ((unsigned) (CTRL_CMD_NEWMCAST_GRP))
 #define XLAT_STR_7 STRINGIFY(CTRL_CMD_NEWMCAST_GRP)
 [CTRL_CMD_DELMCAST_GRP] = XLAT(CTRL_CMD_DELMCAST_GRP),
 #define XLAT_VAL_8 ((unsigned) (CTRL_CMD_DELMCAST_GRP))
 #define XLAT_STR_8 STRINGIFY(CTRL_CMD_DELMCAST_GRP)
 [CTRL_CMD_GETMCAST_GRP] = XLAT(CTRL_CMD_GETMCAST_GRP),
 #define XLAT_VAL_9 ((unsigned) (CTRL_CMD_GETMCAST_GRP))
 #define XLAT_STR_9 STRINGIFY(CTRL_CMD_GETMCAST_GRP)
 [CTRL_CMD_GETPOLICY] = XLAT(CTRL_CMD_GETPOLICY),
 #define XLAT_VAL_10 ((unsigned) (CTRL_CMD_GETPOLICY))
 #define XLAT_STR_10 STRINGIFY(CTRL_CMD_GETPOLICY)
};
static
const struct xlat genl_ctrl_cmd[1] = { {
 .data = genl_ctrl_cmd_xdata,
 .size = ARRAY_SIZE(genl_ctrl_cmd_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
