/* Generated by ./src/xlat/gen.sh from ./src/xlat/modem_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TIOCM_LE) || (defined(HAVE_DECL_TIOCM_LE) && HAVE_DECL_TIOCM_LE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_LE) == (0x001), "TIOCM_LE != 0x001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_LE 0x001
#endif
#if defined(TIOCM_DTR) || (defined(HAVE_DECL_TIOCM_DTR) && HAVE_DECL_TIOCM_DTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_DTR) == (0x002), "TIOCM_DTR != 0x002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_DTR 0x002
#endif
#if defined(TIOCM_RTS) || (defined(HAVE_DECL_TIOCM_RTS) && HAVE_DECL_TIOCM_RTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_RTS) == (0x004), "TIOCM_RTS != 0x004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_RTS 0x004
#endif
#ifdef __mips__
#if defined(TIOCM_ST) || (defined(HAVE_DECL_TIOCM_ST) && HAVE_DECL_TIOCM_ST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_ST) == (0x010), "TIOCM_ST != 0x010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_ST 0x010
#endif
#if defined(TIOCM_SR) || (defined(HAVE_DECL_TIOCM_SR) && HAVE_DECL_TIOCM_SR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_SR) == (0x020), "TIOCM_SR != 0x020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_SR 0x020
#endif
#if defined(TIOCM_CTS) || (defined(HAVE_DECL_TIOCM_CTS) && HAVE_DECL_TIOCM_CTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_CTS) == (0x040), "TIOCM_CTS != 0x040");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_CTS 0x040
#endif
#if defined(TIOCM_CAR) || (defined(HAVE_DECL_TIOCM_CAR) && HAVE_DECL_TIOCM_CAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_CAR) == (0x100), "TIOCM_CAR != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_CAR 0x100
#endif
#if defined(TIOCM_RNG) || (defined(HAVE_DECL_TIOCM_RNG) && HAVE_DECL_TIOCM_RNG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_RNG) == (0x200), "TIOCM_RNG != 0x200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_RNG 0x200
#endif
#if defined(TIOCM_DSR) || (defined(HAVE_DECL_TIOCM_DSR) && HAVE_DECL_TIOCM_DSR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_DSR) == (0x400), "TIOCM_DSR != 0x400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_DSR 0x400
#endif
#else
#if defined(TIOCM_ST) || (defined(HAVE_DECL_TIOCM_ST) && HAVE_DECL_TIOCM_ST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_ST) == (0x008), "TIOCM_ST != 0x008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_ST 0x008
#endif
#if defined(TIOCM_SR) || (defined(HAVE_DECL_TIOCM_SR) && HAVE_DECL_TIOCM_SR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_SR) == (0x010), "TIOCM_SR != 0x010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_SR 0x010
#endif
#if defined(TIOCM_CTS) || (defined(HAVE_DECL_TIOCM_CTS) && HAVE_DECL_TIOCM_CTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_CTS) == (0x020), "TIOCM_CTS != 0x020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_CTS 0x020
#endif
#if defined(TIOCM_CAR) || (defined(HAVE_DECL_TIOCM_CAR) && HAVE_DECL_TIOCM_CAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_CAR) == (0x040), "TIOCM_CAR != 0x040");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_CAR 0x040
#endif
#if defined(TIOCM_RNG) || (defined(HAVE_DECL_TIOCM_RNG) && HAVE_DECL_TIOCM_RNG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_RNG) == (0x080), "TIOCM_RNG != 0x080");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_RNG 0x080
#endif
#if defined(TIOCM_DSR) || (defined(HAVE_DECL_TIOCM_DSR) && HAVE_DECL_TIOCM_DSR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_DSR) == (0x100), "TIOCM_DSR != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_DSR 0x100
#endif
#endif
#if defined(TIOCM_OUT1) || (defined(HAVE_DECL_TIOCM_OUT1) && HAVE_DECL_TIOCM_OUT1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_OUT1) == (0x2000), "TIOCM_OUT1 != 0x2000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_OUT1 0x2000
#endif
#if defined(TIOCM_OUT2) || (defined(HAVE_DECL_TIOCM_OUT2) && HAVE_DECL_TIOCM_OUT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_OUT2) == (0x4000), "TIOCM_OUT2 != 0x4000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_OUT2 0x4000
#endif
#if defined(TIOCM_LOOP) || (defined(HAVE_DECL_TIOCM_LOOP) && HAVE_DECL_TIOCM_LOOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIOCM_LOOP) == (0x8000), "TIOCM_LOOP != 0x8000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIOCM_LOOP 0x8000
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat modem_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data modem_flags_xdata[] = {
 XLAT(TIOCM_LE),
 #define XLAT_VAL_0 ((unsigned) (TIOCM_LE))
 #define XLAT_STR_0 STRINGIFY(TIOCM_LE)
 XLAT(TIOCM_DTR),
 #define XLAT_VAL_1 ((unsigned) (TIOCM_DTR))
 #define XLAT_STR_1 STRINGIFY(TIOCM_DTR)
 XLAT(TIOCM_RTS),
 #define XLAT_VAL_2 ((unsigned) (TIOCM_RTS))
 #define XLAT_STR_2 STRINGIFY(TIOCM_RTS)

#ifdef __mips__
 XLAT(TIOCM_ST),
 #define XLAT_VAL_3 ((unsigned) (TIOCM_ST))
 #define XLAT_STR_3 STRINGIFY(TIOCM_ST)
 XLAT(TIOCM_SR),
 #define XLAT_VAL_4 ((unsigned) (TIOCM_SR))
 #define XLAT_STR_4 STRINGIFY(TIOCM_SR)
 XLAT(TIOCM_CTS),
 #define XLAT_VAL_5 ((unsigned) (TIOCM_CTS))
 #define XLAT_STR_5 STRINGIFY(TIOCM_CTS)
 XLAT(TIOCM_CAR),
 #define XLAT_VAL_6 ((unsigned) (TIOCM_CAR))
 #define XLAT_STR_6 STRINGIFY(TIOCM_CAR)
 XLAT(TIOCM_RNG),
 #define XLAT_VAL_7 ((unsigned) (TIOCM_RNG))
 #define XLAT_STR_7 STRINGIFY(TIOCM_RNG)
 XLAT(TIOCM_DSR),
 #define XLAT_VAL_8 ((unsigned) (TIOCM_DSR))
 #define XLAT_STR_8 STRINGIFY(TIOCM_DSR)
#else
 XLAT(TIOCM_ST),
 #define XLAT_VAL_9 ((unsigned) (TIOCM_ST))
 #define XLAT_STR_9 STRINGIFY(TIOCM_ST)
 XLAT(TIOCM_SR),
 #define XLAT_VAL_10 ((unsigned) (TIOCM_SR))
 #define XLAT_STR_10 STRINGIFY(TIOCM_SR)
 XLAT(TIOCM_CTS),
 #define XLAT_VAL_11 ((unsigned) (TIOCM_CTS))
 #define XLAT_STR_11 STRINGIFY(TIOCM_CTS)
 XLAT(TIOCM_CAR),
 #define XLAT_VAL_12 ((unsigned) (TIOCM_CAR))
 #define XLAT_STR_12 STRINGIFY(TIOCM_CAR)
 XLAT(TIOCM_RNG),
 #define XLAT_VAL_13 ((unsigned) (TIOCM_RNG))
 #define XLAT_STR_13 STRINGIFY(TIOCM_RNG)
 XLAT(TIOCM_DSR),
 #define XLAT_VAL_14 ((unsigned) (TIOCM_DSR))
 #define XLAT_STR_14 STRINGIFY(TIOCM_DSR)
#endif

 XLAT(TIOCM_OUT1),
 #define XLAT_VAL_15 ((unsigned) (TIOCM_OUT1))
 #define XLAT_STR_15 STRINGIFY(TIOCM_OUT1)
 XLAT(TIOCM_OUT2),
 #define XLAT_VAL_16 ((unsigned) (TIOCM_OUT2))
 #define XLAT_STR_16 STRINGIFY(TIOCM_OUT2)
 XLAT(TIOCM_LOOP),
 #define XLAT_VAL_17 ((unsigned) (TIOCM_LOOP))
 #define XLAT_STR_17 STRINGIFY(TIOCM_LOOP)
};
static
const struct xlat modem_flags[1] = { {
 .data = modem_flags_xdata,
 .size = ARRAY_SIZE(modem_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
