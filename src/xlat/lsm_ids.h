/* Generated by ./src/xlat/gen.sh from ./src/xlat/lsm_ids.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat lsm_ids in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data lsm_ids_xdata[] = {
 XLAT_TYPE(uint64_t, LSM_ID_UNDEF),
 #define XLAT_VAL_0 ((uint64_t) (LSM_ID_UNDEF))
 #define XLAT_STR_0 STRINGIFY(LSM_ID_UNDEF)
 XLAT_TYPE(uint64_t, LSM_ID_CAPABILITY),
 #define XLAT_VAL_1 ((uint64_t) (LSM_ID_CAPABILITY))
 #define XLAT_STR_1 STRINGIFY(LSM_ID_CAPABILITY)
 XLAT_TYPE(uint64_t, LSM_ID_SELINUX),
 #define XLAT_VAL_2 ((uint64_t) (LSM_ID_SELINUX))
 #define XLAT_STR_2 STRINGIFY(LSM_ID_SELINUX)
 XLAT_TYPE(uint64_t, LSM_ID_SMACK),
 #define XLAT_VAL_3 ((uint64_t) (LSM_ID_SMACK))
 #define XLAT_STR_3 STRINGIFY(LSM_ID_SMACK)
 XLAT_TYPE(uint64_t, LSM_ID_TOMOYO),
 #define XLAT_VAL_4 ((uint64_t) (LSM_ID_TOMOYO))
 #define XLAT_STR_4 STRINGIFY(LSM_ID_TOMOYO)
 XLAT_TYPE(uint64_t, LSM_ID_APPARMOR),
 #define XLAT_VAL_5 ((uint64_t) (LSM_ID_APPARMOR))
 #define XLAT_STR_5 STRINGIFY(LSM_ID_APPARMOR)
 XLAT_TYPE(uint64_t, LSM_ID_YAMA),
 #define XLAT_VAL_6 ((uint64_t) (LSM_ID_YAMA))
 #define XLAT_STR_6 STRINGIFY(LSM_ID_YAMA)
 XLAT_TYPE(uint64_t, LSM_ID_LOADPIN),
 #define XLAT_VAL_7 ((uint64_t) (LSM_ID_LOADPIN))
 #define XLAT_STR_7 STRINGIFY(LSM_ID_LOADPIN)
 XLAT_TYPE(uint64_t, LSM_ID_SAFESETID),
 #define XLAT_VAL_8 ((uint64_t) (LSM_ID_SAFESETID))
 #define XLAT_STR_8 STRINGIFY(LSM_ID_SAFESETID)
 XLAT_TYPE(uint64_t, LSM_ID_LOCKDOWN),
 #define XLAT_VAL_9 ((uint64_t) (LSM_ID_LOCKDOWN))
 #define XLAT_STR_9 STRINGIFY(LSM_ID_LOCKDOWN)
 XLAT_TYPE(uint64_t, LSM_ID_BPF),
 #define XLAT_VAL_10 ((uint64_t) (LSM_ID_BPF))
 #define XLAT_STR_10 STRINGIFY(LSM_ID_BPF)
 XLAT_TYPE(uint64_t, LSM_ID_LANDLOCK),
 #define XLAT_VAL_11 ((uint64_t) (LSM_ID_LANDLOCK))
 #define XLAT_STR_11 STRINGIFY(LSM_ID_LANDLOCK)
 XLAT_TYPE(uint64_t, LSM_ID_IMA),
 #define XLAT_VAL_12 ((uint64_t) (LSM_ID_IMA))
 #define XLAT_STR_12 STRINGIFY(LSM_ID_IMA)
 XLAT_TYPE(uint64_t, LSM_ID_EVM),
 #define XLAT_VAL_13 ((uint64_t) (LSM_ID_EVM))
 #define XLAT_STR_13 STRINGIFY(LSM_ID_EVM)
};
static
const struct xlat lsm_ids[1] = { {
 .data = lsm_ids_xdata,
 .size = ARRAY_SIZE(lsm_ids_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
