/* Generated by ./src/xlat/gen.sh from ./src/xlat/pr_ppc_dexcr_ctrl_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PR_PPC_DEXCR_CTRL_EDITABLE) || (defined(HAVE_DECL_PR_PPC_DEXCR_CTRL_EDITABLE) && HAVE_DECL_PR_PPC_DEXCR_CTRL_EDITABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_PPC_DEXCR_CTRL_EDITABLE) == (0x1), "PR_PPC_DEXCR_CTRL_EDITABLE != 0x1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_PPC_DEXCR_CTRL_EDITABLE 0x1
#endif
#if defined(PR_PPC_DEXCR_CTRL_SET) || (defined(HAVE_DECL_PR_PPC_DEXCR_CTRL_SET) && HAVE_DECL_PR_PPC_DEXCR_CTRL_SET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_PPC_DEXCR_CTRL_SET) == (0x2), "PR_PPC_DEXCR_CTRL_SET != 0x2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_PPC_DEXCR_CTRL_SET 0x2
#endif
#if defined(PR_PPC_DEXCR_CTRL_CLEAR) || (defined(HAVE_DECL_PR_PPC_DEXCR_CTRL_CLEAR) && HAVE_DECL_PR_PPC_DEXCR_CTRL_CLEAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_PPC_DEXCR_CTRL_CLEAR) == (0x4), "PR_PPC_DEXCR_CTRL_CLEAR != 0x4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_PPC_DEXCR_CTRL_CLEAR 0x4
#endif
#if defined(PR_PPC_DEXCR_CTRL_SET_ONEXEC) || (defined(HAVE_DECL_PR_PPC_DEXCR_CTRL_SET_ONEXEC) && HAVE_DECL_PR_PPC_DEXCR_CTRL_SET_ONEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_PPC_DEXCR_CTRL_SET_ONEXEC) == (0x8), "PR_PPC_DEXCR_CTRL_SET_ONEXEC != 0x8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_PPC_DEXCR_CTRL_SET_ONEXEC 0x8
#endif
#if defined(PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC) || (defined(HAVE_DECL_PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC) && HAVE_DECL_PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC) == (0x10), "PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC 0x10
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat pr_ppc_dexcr_ctrl_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data pr_ppc_dexcr_ctrl_flags_xdata[] = {
 XLAT(PR_PPC_DEXCR_CTRL_EDITABLE),
 #define XLAT_VAL_0 ((unsigned) (PR_PPC_DEXCR_CTRL_EDITABLE))
 #define XLAT_STR_0 STRINGIFY(PR_PPC_DEXCR_CTRL_EDITABLE)
 XLAT(PR_PPC_DEXCR_CTRL_SET),
 #define XLAT_VAL_1 ((unsigned) (PR_PPC_DEXCR_CTRL_SET))
 #define XLAT_STR_1 STRINGIFY(PR_PPC_DEXCR_CTRL_SET)
 XLAT(PR_PPC_DEXCR_CTRL_CLEAR),
 #define XLAT_VAL_2 ((unsigned) (PR_PPC_DEXCR_CTRL_CLEAR))
 #define XLAT_STR_2 STRINGIFY(PR_PPC_DEXCR_CTRL_CLEAR)
 XLAT(PR_PPC_DEXCR_CTRL_SET_ONEXEC),
 #define XLAT_VAL_3 ((unsigned) (PR_PPC_DEXCR_CTRL_SET_ONEXEC))
 #define XLAT_STR_3 STRINGIFY(PR_PPC_DEXCR_CTRL_SET_ONEXEC)
 XLAT(PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC),
 #define XLAT_VAL_4 ((unsigned) (PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC))
 #define XLAT_STR_4 STRINGIFY(PR_PPC_DEXCR_CTRL_CLEAR_ONEXEC)
};
static
const struct xlat pr_ppc_dexcr_ctrl_flags[1] = { {
 .data = pr_ppc_dexcr_ctrl_flags_xdata,
 .size = ARRAY_SIZE(pr_ppc_dexcr_ctrl_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
