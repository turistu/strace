/* Generated by ./src/xlat/gen.sh from ./src/xlat/archvals.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ARCH_SET_GS) || (defined(HAVE_DECL_ARCH_SET_GS) && HAVE_DECL_ARCH_SET_GS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SET_GS) == (0x1001), "ARCH_SET_GS != 0x1001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SET_GS 0x1001
#endif
#if defined(ARCH_SET_GS) || (defined(HAVE_DECL_ARCH_SET_GS) && HAVE_DECL_ARCH_SET_GS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SET_GS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SET_GS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SET_GS)
#endif
#if defined(ARCH_SET_FS) || (defined(HAVE_DECL_ARCH_SET_FS) && HAVE_DECL_ARCH_SET_FS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SET_FS) == (0x1002), "ARCH_SET_FS != 0x1002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SET_FS 0x1002
#endif
#if defined(ARCH_SET_FS) || (defined(HAVE_DECL_ARCH_SET_FS) && HAVE_DECL_ARCH_SET_FS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SET_FS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SET_FS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SET_FS)
#endif
#if defined(ARCH_GET_FS) || (defined(HAVE_DECL_ARCH_GET_FS) && HAVE_DECL_ARCH_GET_FS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_FS) == (0x1003), "ARCH_GET_FS != 0x1003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_FS 0x1003
#endif
#if defined(ARCH_GET_FS) || (defined(HAVE_DECL_ARCH_GET_FS) && HAVE_DECL_ARCH_GET_FS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_FS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_FS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_FS)
#endif
#if defined(ARCH_GET_GS) || (defined(HAVE_DECL_ARCH_GET_GS) && HAVE_DECL_ARCH_GET_GS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_GS) == (0x1004), "ARCH_GET_GS != 0x1004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_GS 0x1004
#endif
#if defined(ARCH_GET_GS) || (defined(HAVE_DECL_ARCH_GET_GS) && HAVE_DECL_ARCH_GET_GS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_GS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_GS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_GS)
#endif
#if defined(ARCH_GET_CPUID) || (defined(HAVE_DECL_ARCH_GET_CPUID) && HAVE_DECL_ARCH_GET_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_CPUID) == (0x1011), "ARCH_GET_CPUID != 0x1011");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_CPUID 0x1011
#endif
#if defined(ARCH_GET_CPUID) || (defined(HAVE_DECL_ARCH_GET_CPUID) && HAVE_DECL_ARCH_GET_CPUID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_CPUID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_CPUID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_CPUID)
#endif
#if defined(ARCH_SET_CPUID) || (defined(HAVE_DECL_ARCH_SET_CPUID) && HAVE_DECL_ARCH_SET_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SET_CPUID) == (0x1012), "ARCH_SET_CPUID != 0x1012");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SET_CPUID 0x1012
#endif
#if defined(ARCH_SET_CPUID) || (defined(HAVE_DECL_ARCH_SET_CPUID) && HAVE_DECL_ARCH_SET_CPUID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SET_CPUID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SET_CPUID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SET_CPUID)
#endif
#if defined(ARCH_GET_XCOMP_SUPP) || (defined(HAVE_DECL_ARCH_GET_XCOMP_SUPP) && HAVE_DECL_ARCH_GET_XCOMP_SUPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_XCOMP_SUPP) == (0x1021), "ARCH_GET_XCOMP_SUPP != 0x1021");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_XCOMP_SUPP 0x1021
#endif
#if defined(ARCH_GET_XCOMP_SUPP) || (defined(HAVE_DECL_ARCH_GET_XCOMP_SUPP) && HAVE_DECL_ARCH_GET_XCOMP_SUPP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_XCOMP_SUPP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_XCOMP_SUPP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_XCOMP_SUPP)
#endif
#if defined(ARCH_GET_XCOMP_PERM) || (defined(HAVE_DECL_ARCH_GET_XCOMP_PERM) && HAVE_DECL_ARCH_GET_XCOMP_PERM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_XCOMP_PERM) == (0x1022), "ARCH_GET_XCOMP_PERM != 0x1022");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_XCOMP_PERM 0x1022
#endif
#if defined(ARCH_GET_XCOMP_PERM) || (defined(HAVE_DECL_ARCH_GET_XCOMP_PERM) && HAVE_DECL_ARCH_GET_XCOMP_PERM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_XCOMP_PERM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_XCOMP_PERM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_XCOMP_PERM)
#endif
#if defined(ARCH_REQ_XCOMP_PERM) || (defined(HAVE_DECL_ARCH_REQ_XCOMP_PERM) && HAVE_DECL_ARCH_REQ_XCOMP_PERM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_REQ_XCOMP_PERM) == (0x1023), "ARCH_REQ_XCOMP_PERM != 0x1023");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_REQ_XCOMP_PERM 0x1023
#endif
#if defined(ARCH_REQ_XCOMP_PERM) || (defined(HAVE_DECL_ARCH_REQ_XCOMP_PERM) && HAVE_DECL_ARCH_REQ_XCOMP_PERM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_REQ_XCOMP_PERM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_REQ_XCOMP_PERM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_REQ_XCOMP_PERM)
#endif
#if defined(ARCH_GET_XCOMP_GUEST_PERM) || (defined(HAVE_DECL_ARCH_GET_XCOMP_GUEST_PERM) && HAVE_DECL_ARCH_GET_XCOMP_GUEST_PERM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_XCOMP_GUEST_PERM) == (0x1024), "ARCH_GET_XCOMP_GUEST_PERM != 0x1024");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_XCOMP_GUEST_PERM 0x1024
#endif
#if defined(ARCH_GET_XCOMP_GUEST_PERM) || (defined(HAVE_DECL_ARCH_GET_XCOMP_GUEST_PERM) && HAVE_DECL_ARCH_GET_XCOMP_GUEST_PERM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_XCOMP_GUEST_PERM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_XCOMP_GUEST_PERM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_XCOMP_GUEST_PERM)
#endif
#if defined(ARCH_REQ_XCOMP_GUEST_PERM) || (defined(HAVE_DECL_ARCH_REQ_XCOMP_GUEST_PERM) && HAVE_DECL_ARCH_REQ_XCOMP_GUEST_PERM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_REQ_XCOMP_GUEST_PERM) == (0x1025), "ARCH_REQ_XCOMP_GUEST_PERM != 0x1025");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_REQ_XCOMP_GUEST_PERM 0x1025
#endif
#if defined(ARCH_REQ_XCOMP_GUEST_PERM) || (defined(HAVE_DECL_ARCH_REQ_XCOMP_GUEST_PERM) && HAVE_DECL_ARCH_REQ_XCOMP_GUEST_PERM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_REQ_XCOMP_GUEST_PERM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_REQ_XCOMP_GUEST_PERM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_REQ_XCOMP_GUEST_PERM)
#endif
#if defined(ARCH_MAP_VDSO_X32) || (defined(HAVE_DECL_ARCH_MAP_VDSO_X32) && HAVE_DECL_ARCH_MAP_VDSO_X32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_MAP_VDSO_X32) == (0x2001), "ARCH_MAP_VDSO_X32 != 0x2001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_MAP_VDSO_X32 0x2001
#endif
#if defined(ARCH_MAP_VDSO_X32) || (defined(HAVE_DECL_ARCH_MAP_VDSO_X32) && HAVE_DECL_ARCH_MAP_VDSO_X32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_MAP_VDSO_X32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_MAP_VDSO_X32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_MAP_VDSO_X32)
#endif
#if defined(ARCH_MAP_VDSO_32) || (defined(HAVE_DECL_ARCH_MAP_VDSO_32) && HAVE_DECL_ARCH_MAP_VDSO_32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_MAP_VDSO_32) == (0x2002), "ARCH_MAP_VDSO_32 != 0x2002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_MAP_VDSO_32 0x2002
#endif
#if defined(ARCH_MAP_VDSO_32) || (defined(HAVE_DECL_ARCH_MAP_VDSO_32) && HAVE_DECL_ARCH_MAP_VDSO_32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_MAP_VDSO_32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_MAP_VDSO_32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_MAP_VDSO_32)
#endif
#if defined(ARCH_MAP_VDSO_64) || (defined(HAVE_DECL_ARCH_MAP_VDSO_64) && HAVE_DECL_ARCH_MAP_VDSO_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_MAP_VDSO_64) == (0x2003), "ARCH_MAP_VDSO_64 != 0x2003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_MAP_VDSO_64 0x2003
#endif
#if defined(ARCH_MAP_VDSO_64) || (defined(HAVE_DECL_ARCH_MAP_VDSO_64) && HAVE_DECL_ARCH_MAP_VDSO_64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_MAP_VDSO_64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_MAP_VDSO_64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_MAP_VDSO_64)
#endif
#if defined(ARCH_GET_UNTAG_MASK) || (defined(HAVE_DECL_ARCH_GET_UNTAG_MASK) && HAVE_DECL_ARCH_GET_UNTAG_MASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_UNTAG_MASK) == (0x4001), "ARCH_GET_UNTAG_MASK != 0x4001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_UNTAG_MASK 0x4001
#endif
#if defined(ARCH_GET_UNTAG_MASK) || (defined(HAVE_DECL_ARCH_GET_UNTAG_MASK) && HAVE_DECL_ARCH_GET_UNTAG_MASK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_UNTAG_MASK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_UNTAG_MASK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_UNTAG_MASK)
#endif
#if defined(ARCH_ENABLE_TAGGED_ADDR) || (defined(HAVE_DECL_ARCH_ENABLE_TAGGED_ADDR) && HAVE_DECL_ARCH_ENABLE_TAGGED_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_ENABLE_TAGGED_ADDR) == (0x4002), "ARCH_ENABLE_TAGGED_ADDR != 0x4002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_ENABLE_TAGGED_ADDR 0x4002
#endif
#if defined(ARCH_ENABLE_TAGGED_ADDR) || (defined(HAVE_DECL_ARCH_ENABLE_TAGGED_ADDR) && HAVE_DECL_ARCH_ENABLE_TAGGED_ADDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_ENABLE_TAGGED_ADDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_ENABLE_TAGGED_ADDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_ENABLE_TAGGED_ADDR)
#endif
#if defined(ARCH_GET_MAX_TAG_BITS) || (defined(HAVE_DECL_ARCH_GET_MAX_TAG_BITS) && HAVE_DECL_ARCH_GET_MAX_TAG_BITS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_GET_MAX_TAG_BITS) == (0x4003), "ARCH_GET_MAX_TAG_BITS != 0x4003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_GET_MAX_TAG_BITS 0x4003
#endif
#if defined(ARCH_GET_MAX_TAG_BITS) || (defined(HAVE_DECL_ARCH_GET_MAX_TAG_BITS) && HAVE_DECL_ARCH_GET_MAX_TAG_BITS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_GET_MAX_TAG_BITS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_GET_MAX_TAG_BITS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_GET_MAX_TAG_BITS)
#endif
#if defined(ARCH_FORCE_TAGGED_SVA) || (defined(HAVE_DECL_ARCH_FORCE_TAGGED_SVA) && HAVE_DECL_ARCH_FORCE_TAGGED_SVA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_FORCE_TAGGED_SVA) == (0x4004), "ARCH_FORCE_TAGGED_SVA != 0x4004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_FORCE_TAGGED_SVA 0x4004
#endif
#if defined(ARCH_FORCE_TAGGED_SVA) || (defined(HAVE_DECL_ARCH_FORCE_TAGGED_SVA) && HAVE_DECL_ARCH_FORCE_TAGGED_SVA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_FORCE_TAGGED_SVA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_FORCE_TAGGED_SVA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_FORCE_TAGGED_SVA)
#endif
#if defined(ARCH_SHSTK_ENABLE) || (defined(HAVE_DECL_ARCH_SHSTK_ENABLE) && HAVE_DECL_ARCH_SHSTK_ENABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SHSTK_ENABLE) == (0x5001), "ARCH_SHSTK_ENABLE != 0x5001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SHSTK_ENABLE 0x5001
#endif
#if defined(ARCH_SHSTK_ENABLE) || (defined(HAVE_DECL_ARCH_SHSTK_ENABLE) && HAVE_DECL_ARCH_SHSTK_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SHSTK_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SHSTK_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SHSTK_ENABLE)
#endif
#if defined(ARCH_SHSTK_DISABLE) || (defined(HAVE_DECL_ARCH_SHSTK_DISABLE) && HAVE_DECL_ARCH_SHSTK_DISABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SHSTK_DISABLE) == (0x5002), "ARCH_SHSTK_DISABLE != 0x5002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SHSTK_DISABLE 0x5002
#endif
#if defined(ARCH_SHSTK_DISABLE) || (defined(HAVE_DECL_ARCH_SHSTK_DISABLE) && HAVE_DECL_ARCH_SHSTK_DISABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SHSTK_DISABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SHSTK_DISABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SHSTK_DISABLE)
#endif
#if defined(ARCH_SHSTK_LOCK) || (defined(HAVE_DECL_ARCH_SHSTK_LOCK) && HAVE_DECL_ARCH_SHSTK_LOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SHSTK_LOCK) == (0x5003), "ARCH_SHSTK_LOCK != 0x5003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SHSTK_LOCK 0x5003
#endif
#if defined(ARCH_SHSTK_LOCK) || (defined(HAVE_DECL_ARCH_SHSTK_LOCK) && HAVE_DECL_ARCH_SHSTK_LOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SHSTK_LOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SHSTK_LOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SHSTK_LOCK)
#endif
#if defined(ARCH_SHSTK_UNLOCK) || (defined(HAVE_DECL_ARCH_SHSTK_UNLOCK) && HAVE_DECL_ARCH_SHSTK_UNLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SHSTK_UNLOCK) == (0x5004), "ARCH_SHSTK_UNLOCK != 0x5004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SHSTK_UNLOCK 0x5004
#endif
#if defined(ARCH_SHSTK_UNLOCK) || (defined(HAVE_DECL_ARCH_SHSTK_UNLOCK) && HAVE_DECL_ARCH_SHSTK_UNLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SHSTK_UNLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SHSTK_UNLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SHSTK_UNLOCK)
#endif
#if defined(ARCH_SHSTK_STATUS) || (defined(HAVE_DECL_ARCH_SHSTK_STATUS) && HAVE_DECL_ARCH_SHSTK_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARCH_SHSTK_STATUS) == (0x5005), "ARCH_SHSTK_STATUS != 0x5005");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARCH_SHSTK_STATUS 0x5005
#endif
#if defined(ARCH_SHSTK_STATUS) || (defined(HAVE_DECL_ARCH_SHSTK_STATUS) && HAVE_DECL_ARCH_SHSTK_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARCH_SHSTK_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARCH_SHSTK_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARCH_SHSTK_STATUS)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat archvals in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data archvals_xdata[] = {
 XLAT(ARCH_SET_GS),
 #define XLAT_VAL_0 ((unsigned) (ARCH_SET_GS))
 #define XLAT_STR_0 STRINGIFY(ARCH_SET_GS)
 XLAT(ARCH_SET_FS),
 #define XLAT_VAL_1 ((unsigned) (ARCH_SET_FS))
 #define XLAT_STR_1 STRINGIFY(ARCH_SET_FS)
 XLAT(ARCH_GET_FS),
 #define XLAT_VAL_2 ((unsigned) (ARCH_GET_FS))
 #define XLAT_STR_2 STRINGIFY(ARCH_GET_FS)
 XLAT(ARCH_GET_GS),
 #define XLAT_VAL_3 ((unsigned) (ARCH_GET_GS))
 #define XLAT_STR_3 STRINGIFY(ARCH_GET_GS)
 XLAT(ARCH_GET_CPUID),
 #define XLAT_VAL_4 ((unsigned) (ARCH_GET_CPUID))
 #define XLAT_STR_4 STRINGIFY(ARCH_GET_CPUID)
 XLAT(ARCH_SET_CPUID),
 #define XLAT_VAL_5 ((unsigned) (ARCH_SET_CPUID))
 #define XLAT_STR_5 STRINGIFY(ARCH_SET_CPUID)
 XLAT(ARCH_GET_XCOMP_SUPP),
 #define XLAT_VAL_6 ((unsigned) (ARCH_GET_XCOMP_SUPP))
 #define XLAT_STR_6 STRINGIFY(ARCH_GET_XCOMP_SUPP)
 XLAT(ARCH_GET_XCOMP_PERM),
 #define XLAT_VAL_7 ((unsigned) (ARCH_GET_XCOMP_PERM))
 #define XLAT_STR_7 STRINGIFY(ARCH_GET_XCOMP_PERM)
 XLAT(ARCH_REQ_XCOMP_PERM),
 #define XLAT_VAL_8 ((unsigned) (ARCH_REQ_XCOMP_PERM))
 #define XLAT_STR_8 STRINGIFY(ARCH_REQ_XCOMP_PERM)
 XLAT(ARCH_GET_XCOMP_GUEST_PERM),
 #define XLAT_VAL_9 ((unsigned) (ARCH_GET_XCOMP_GUEST_PERM))
 #define XLAT_STR_9 STRINGIFY(ARCH_GET_XCOMP_GUEST_PERM)
 XLAT(ARCH_REQ_XCOMP_GUEST_PERM),
 #define XLAT_VAL_10 ((unsigned) (ARCH_REQ_XCOMP_GUEST_PERM))
 #define XLAT_STR_10 STRINGIFY(ARCH_REQ_XCOMP_GUEST_PERM)
 XLAT(ARCH_MAP_VDSO_X32),
 #define XLAT_VAL_11 ((unsigned) (ARCH_MAP_VDSO_X32))
 #define XLAT_STR_11 STRINGIFY(ARCH_MAP_VDSO_X32)
 XLAT(ARCH_MAP_VDSO_32),
 #define XLAT_VAL_12 ((unsigned) (ARCH_MAP_VDSO_32))
 #define XLAT_STR_12 STRINGIFY(ARCH_MAP_VDSO_32)
 XLAT(ARCH_MAP_VDSO_64),
 #define XLAT_VAL_13 ((unsigned) (ARCH_MAP_VDSO_64))
 #define XLAT_STR_13 STRINGIFY(ARCH_MAP_VDSO_64)
 XLAT(ARCH_GET_UNTAG_MASK),
 #define XLAT_VAL_14 ((unsigned) (ARCH_GET_UNTAG_MASK))
 #define XLAT_STR_14 STRINGIFY(ARCH_GET_UNTAG_MASK)
 XLAT(ARCH_ENABLE_TAGGED_ADDR),
 #define XLAT_VAL_15 ((unsigned) (ARCH_ENABLE_TAGGED_ADDR))
 #define XLAT_STR_15 STRINGIFY(ARCH_ENABLE_TAGGED_ADDR)
 XLAT(ARCH_GET_MAX_TAG_BITS),
 #define XLAT_VAL_16 ((unsigned) (ARCH_GET_MAX_TAG_BITS))
 #define XLAT_STR_16 STRINGIFY(ARCH_GET_MAX_TAG_BITS)
 XLAT(ARCH_FORCE_TAGGED_SVA),
 #define XLAT_VAL_17 ((unsigned) (ARCH_FORCE_TAGGED_SVA))
 #define XLAT_STR_17 STRINGIFY(ARCH_FORCE_TAGGED_SVA)
 XLAT(ARCH_SHSTK_ENABLE),
 #define XLAT_VAL_18 ((unsigned) (ARCH_SHSTK_ENABLE))
 #define XLAT_STR_18 STRINGIFY(ARCH_SHSTK_ENABLE)
 XLAT(ARCH_SHSTK_DISABLE),
 #define XLAT_VAL_19 ((unsigned) (ARCH_SHSTK_DISABLE))
 #define XLAT_STR_19 STRINGIFY(ARCH_SHSTK_DISABLE)
 XLAT(ARCH_SHSTK_LOCK),
 #define XLAT_VAL_20 ((unsigned) (ARCH_SHSTK_LOCK))
 #define XLAT_STR_20 STRINGIFY(ARCH_SHSTK_LOCK)
 XLAT(ARCH_SHSTK_UNLOCK),
 #define XLAT_VAL_21 ((unsigned) (ARCH_SHSTK_UNLOCK))
 #define XLAT_STR_21 STRINGIFY(ARCH_SHSTK_UNLOCK)
 XLAT(ARCH_SHSTK_STATUS),
 #define XLAT_VAL_22 ((unsigned) (ARCH_SHSTK_STATUS))
 #define XLAT_STR_22 STRINGIFY(ARCH_SHSTK_STATUS)
};
static
const struct xlat archvals[1] = { {
 .data = archvals_xdata,
 .size = ARRAY_SIZE(archvals_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
