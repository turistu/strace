/* Generated by ./src/xlat/gen.sh from ./src/xlat/genl_mptcp_pm_cmd.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat genl_mptcp_pm_cmd in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data genl_mptcp_pm_cmd_xdata[] = {

 [MPTCP_PM_CMD_UNSPEC] = XLAT(MPTCP_PM_CMD_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (MPTCP_PM_CMD_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(MPTCP_PM_CMD_UNSPEC)
 [MPTCP_PM_CMD_ADD_ADDR] = XLAT(MPTCP_PM_CMD_ADD_ADDR),
 #define XLAT_VAL_1 ((unsigned) (MPTCP_PM_CMD_ADD_ADDR))
 #define XLAT_STR_1 STRINGIFY(MPTCP_PM_CMD_ADD_ADDR)
 [MPTCP_PM_CMD_DEL_ADDR] = XLAT(MPTCP_PM_CMD_DEL_ADDR),
 #define XLAT_VAL_2 ((unsigned) (MPTCP_PM_CMD_DEL_ADDR))
 #define XLAT_STR_2 STRINGIFY(MPTCP_PM_CMD_DEL_ADDR)
 [MPTCP_PM_CMD_GET_ADDR] = XLAT(MPTCP_PM_CMD_GET_ADDR),
 #define XLAT_VAL_3 ((unsigned) (MPTCP_PM_CMD_GET_ADDR))
 #define XLAT_STR_3 STRINGIFY(MPTCP_PM_CMD_GET_ADDR)
 [MPTCP_PM_CMD_FLUSH_ADDRS] = XLAT(MPTCP_PM_CMD_FLUSH_ADDRS),
 #define XLAT_VAL_4 ((unsigned) (MPTCP_PM_CMD_FLUSH_ADDRS))
 #define XLAT_STR_4 STRINGIFY(MPTCP_PM_CMD_FLUSH_ADDRS)
 [MPTCP_PM_CMD_SET_LIMITS] = XLAT(MPTCP_PM_CMD_SET_LIMITS),
 #define XLAT_VAL_5 ((unsigned) (MPTCP_PM_CMD_SET_LIMITS))
 #define XLAT_STR_5 STRINGIFY(MPTCP_PM_CMD_SET_LIMITS)
 [MPTCP_PM_CMD_GET_LIMITS] = XLAT(MPTCP_PM_CMD_GET_LIMITS),
 #define XLAT_VAL_6 ((unsigned) (MPTCP_PM_CMD_GET_LIMITS))
 #define XLAT_STR_6 STRINGIFY(MPTCP_PM_CMD_GET_LIMITS)
 [MPTCP_PM_CMD_SET_FLAGS] = XLAT(MPTCP_PM_CMD_SET_FLAGS),
 #define XLAT_VAL_7 ((unsigned) (MPTCP_PM_CMD_SET_FLAGS))
 #define XLAT_STR_7 STRINGIFY(MPTCP_PM_CMD_SET_FLAGS)
 [MPTCP_PM_CMD_ANNOUNCE] = XLAT(MPTCP_PM_CMD_ANNOUNCE),
 #define XLAT_VAL_8 ((unsigned) (MPTCP_PM_CMD_ANNOUNCE))
 #define XLAT_STR_8 STRINGIFY(MPTCP_PM_CMD_ANNOUNCE)
 [MPTCP_PM_CMD_REMOVE] = XLAT(MPTCP_PM_CMD_REMOVE),
 #define XLAT_VAL_9 ((unsigned) (MPTCP_PM_CMD_REMOVE))
 #define XLAT_STR_9 STRINGIFY(MPTCP_PM_CMD_REMOVE)
 [MPTCP_PM_CMD_SUBFLOW_CREATE] = XLAT(MPTCP_PM_CMD_SUBFLOW_CREATE),
 #define XLAT_VAL_10 ((unsigned) (MPTCP_PM_CMD_SUBFLOW_CREATE))
 #define XLAT_STR_10 STRINGIFY(MPTCP_PM_CMD_SUBFLOW_CREATE)
 [MPTCP_PM_CMD_SUBFLOW_DESTROY] = XLAT(MPTCP_PM_CMD_SUBFLOW_DESTROY),
 #define XLAT_VAL_11 ((unsigned) (MPTCP_PM_CMD_SUBFLOW_DESTROY))
 #define XLAT_STR_11 STRINGIFY(MPTCP_PM_CMD_SUBFLOW_DESTROY)
};
static
const struct xlat genl_mptcp_pm_cmd[1] = { {
 .data = genl_mptcp_pm_cmd_xdata,
 .size = ARRAY_SIZE(genl_mptcp_pm_cmd_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
