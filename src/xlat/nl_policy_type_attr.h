/* Generated by ./src/xlat/gen.sh from ./src/xlat/nl_policy_type_attr.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nl_policy_type_attr in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nl_policy_type_attr_xdata[] = {

 [NL_POLICY_TYPE_ATTR_UNSPEC] = XLAT(NL_POLICY_TYPE_ATTR_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (NL_POLICY_TYPE_ATTR_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(NL_POLICY_TYPE_ATTR_UNSPEC)
 [NL_POLICY_TYPE_ATTR_TYPE] = XLAT(NL_POLICY_TYPE_ATTR_TYPE),
 #define XLAT_VAL_1 ((unsigned) (NL_POLICY_TYPE_ATTR_TYPE))
 #define XLAT_STR_1 STRINGIFY(NL_POLICY_TYPE_ATTR_TYPE)
 [NL_POLICY_TYPE_ATTR_MIN_VALUE_S] = XLAT(NL_POLICY_TYPE_ATTR_MIN_VALUE_S),
 #define XLAT_VAL_2 ((unsigned) (NL_POLICY_TYPE_ATTR_MIN_VALUE_S))
 #define XLAT_STR_2 STRINGIFY(NL_POLICY_TYPE_ATTR_MIN_VALUE_S)
 [NL_POLICY_TYPE_ATTR_MAX_VALUE_S] = XLAT(NL_POLICY_TYPE_ATTR_MAX_VALUE_S),
 #define XLAT_VAL_3 ((unsigned) (NL_POLICY_TYPE_ATTR_MAX_VALUE_S))
 #define XLAT_STR_3 STRINGIFY(NL_POLICY_TYPE_ATTR_MAX_VALUE_S)
 [NL_POLICY_TYPE_ATTR_MIN_VALUE_U] = XLAT(NL_POLICY_TYPE_ATTR_MIN_VALUE_U),
 #define XLAT_VAL_4 ((unsigned) (NL_POLICY_TYPE_ATTR_MIN_VALUE_U))
 #define XLAT_STR_4 STRINGIFY(NL_POLICY_TYPE_ATTR_MIN_VALUE_U)
 [NL_POLICY_TYPE_ATTR_MAX_VALUE_U] = XLAT(NL_POLICY_TYPE_ATTR_MAX_VALUE_U),
 #define XLAT_VAL_5 ((unsigned) (NL_POLICY_TYPE_ATTR_MAX_VALUE_U))
 #define XLAT_STR_5 STRINGIFY(NL_POLICY_TYPE_ATTR_MAX_VALUE_U)
 [NL_POLICY_TYPE_ATTR_MIN_LENGTH] = XLAT(NL_POLICY_TYPE_ATTR_MIN_LENGTH),
 #define XLAT_VAL_6 ((unsigned) (NL_POLICY_TYPE_ATTR_MIN_LENGTH))
 #define XLAT_STR_6 STRINGIFY(NL_POLICY_TYPE_ATTR_MIN_LENGTH)
 [NL_POLICY_TYPE_ATTR_MAX_LENGTH] = XLAT(NL_POLICY_TYPE_ATTR_MAX_LENGTH),
 #define XLAT_VAL_7 ((unsigned) (NL_POLICY_TYPE_ATTR_MAX_LENGTH))
 #define XLAT_STR_7 STRINGIFY(NL_POLICY_TYPE_ATTR_MAX_LENGTH)
 [NL_POLICY_TYPE_ATTR_POLICY_IDX] = XLAT(NL_POLICY_TYPE_ATTR_POLICY_IDX),
 #define XLAT_VAL_8 ((unsigned) (NL_POLICY_TYPE_ATTR_POLICY_IDX))
 #define XLAT_STR_8 STRINGIFY(NL_POLICY_TYPE_ATTR_POLICY_IDX)
 [NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE] = XLAT(NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE),
 #define XLAT_VAL_9 ((unsigned) (NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE))
 #define XLAT_STR_9 STRINGIFY(NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE)
 [NL_POLICY_TYPE_ATTR_BITFIELD32_MASK] = XLAT(NL_POLICY_TYPE_ATTR_BITFIELD32_MASK),
 #define XLAT_VAL_10 ((unsigned) (NL_POLICY_TYPE_ATTR_BITFIELD32_MASK))
 #define XLAT_STR_10 STRINGIFY(NL_POLICY_TYPE_ATTR_BITFIELD32_MASK)
 [NL_POLICY_TYPE_ATTR_PAD] = XLAT(NL_POLICY_TYPE_ATTR_PAD),
 #define XLAT_VAL_11 ((unsigned) (NL_POLICY_TYPE_ATTR_PAD))
 #define XLAT_STR_11 STRINGIFY(NL_POLICY_TYPE_ATTR_PAD)
 [NL_POLICY_TYPE_ATTR_MASK] = XLAT(NL_POLICY_TYPE_ATTR_MASK),
 #define XLAT_VAL_12 ((unsigned) (NL_POLICY_TYPE_ATTR_MASK))
 #define XLAT_STR_12 STRINGIFY(NL_POLICY_TYPE_ATTR_MASK)
};
static
const struct xlat nl_policy_type_attr[1] = { {
 .data = nl_policy_type_attr_xdata,
 .size = ARRAY_SIZE(nl_policy_type_attr_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
