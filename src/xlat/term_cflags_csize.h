/* Generated by ./src/xlat/gen.sh from ./src/xlat/term_cflags_csize.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat term_cflags_csize in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data term_cflags_csize_xdata[] = {
#if defined(CS5) || (defined(HAVE_DECL_CS5) && HAVE_DECL_CS5)
  XLAT(CS5),
 #define XLAT_VAL_0 ((unsigned) (CS5))
 #define XLAT_STR_0 STRINGIFY(CS5)
#endif
#if defined(CS6) || (defined(HAVE_DECL_CS6) && HAVE_DECL_CS6)
  XLAT(CS6),
 #define XLAT_VAL_1 ((unsigned) (CS6))
 #define XLAT_STR_1 STRINGIFY(CS6)
#endif
#if defined(CS7) || (defined(HAVE_DECL_CS7) && HAVE_DECL_CS7)
  XLAT(CS7),
 #define XLAT_VAL_2 ((unsigned) (CS7))
 #define XLAT_STR_2 STRINGIFY(CS7)
#endif
#if defined(CS8) || (defined(HAVE_DECL_CS8) && HAVE_DECL_CS8)
  XLAT(CS8),
 #define XLAT_VAL_3 ((unsigned) (CS8))
 #define XLAT_STR_3 STRINGIFY(CS8)
#endif
};
static
const struct xlat term_cflags_csize[1] = { {
 .data = term_cflags_csize_xdata,
 .size = ARRAY_SIZE(term_cflags_csize_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
