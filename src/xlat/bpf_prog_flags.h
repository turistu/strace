/* Generated by ./src/xlat/gen.sh from ./src/xlat/bpf_prog_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_F_STRICT_ALIGNMENT) || (defined(HAVE_DECL_BPF_F_STRICT_ALIGNMENT) && HAVE_DECL_BPF_F_STRICT_ALIGNMENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_STRICT_ALIGNMENT) == (1U), "BPF_F_STRICT_ALIGNMENT != 1U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_STRICT_ALIGNMENT 1U
#endif
#if defined(BPF_F_ANY_ALIGNMENT) || (defined(HAVE_DECL_BPF_F_ANY_ALIGNMENT) && HAVE_DECL_BPF_F_ANY_ALIGNMENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_ANY_ALIGNMENT) == ((1U << 1)), "BPF_F_ANY_ALIGNMENT != (1U << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_ANY_ALIGNMENT (1U << 1)
#endif
#if defined(BPF_F_TEST_RND_HI32) || (defined(HAVE_DECL_BPF_F_TEST_RND_HI32) && HAVE_DECL_BPF_F_TEST_RND_HI32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_TEST_RND_HI32) == ((1U << 2)), "BPF_F_TEST_RND_HI32 != (1U << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_TEST_RND_HI32 (1U << 2)
#endif
#if defined(BPF_F_TEST_STATE_FREQ) || (defined(HAVE_DECL_BPF_F_TEST_STATE_FREQ) && HAVE_DECL_BPF_F_TEST_STATE_FREQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_TEST_STATE_FREQ) == ((1U << 3)), "BPF_F_TEST_STATE_FREQ != (1U << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_TEST_STATE_FREQ (1U << 3)
#endif
#if defined(BPF_F_SLEEPABLE) || (defined(HAVE_DECL_BPF_F_SLEEPABLE) && HAVE_DECL_BPF_F_SLEEPABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_SLEEPABLE) == ((1U << 4)), "BPF_F_SLEEPABLE != (1U << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_SLEEPABLE (1U << 4)
#endif
#if defined(BPF_F_XDP_HAS_FRAGS) || (defined(HAVE_DECL_BPF_F_XDP_HAS_FRAGS) && HAVE_DECL_BPF_F_XDP_HAS_FRAGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_XDP_HAS_FRAGS) == ((1U << 5)), "BPF_F_XDP_HAS_FRAGS != (1U << 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_XDP_HAS_FRAGS (1U << 5)
#endif
#if defined(BPF_F_XDP_DEV_BOUND_ONLY) || (defined(HAVE_DECL_BPF_F_XDP_DEV_BOUND_ONLY) && HAVE_DECL_BPF_F_XDP_DEV_BOUND_ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_XDP_DEV_BOUND_ONLY) == ((1U << 6)), "BPF_F_XDP_DEV_BOUND_ONLY != (1U << 6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_XDP_DEV_BOUND_ONLY (1U << 6)
#endif
#if defined(BPF_F_TEST_REG_INVARIANTS) || (defined(HAVE_DECL_BPF_F_TEST_REG_INVARIANTS) && HAVE_DECL_BPF_F_TEST_REG_INVARIANTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_TEST_REG_INVARIANTS) == ((1U << 7)), "BPF_F_TEST_REG_INVARIANTS != (1U << 7)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_TEST_REG_INVARIANTS (1U << 7)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bpf_prog_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data bpf_prog_flags_xdata[] = {
 XLAT(BPF_F_STRICT_ALIGNMENT),
 #define XLAT_VAL_0 ((unsigned) (BPF_F_STRICT_ALIGNMENT))
 #define XLAT_STR_0 STRINGIFY(BPF_F_STRICT_ALIGNMENT)
 XLAT(BPF_F_ANY_ALIGNMENT),
 #define XLAT_VAL_1 ((unsigned) (BPF_F_ANY_ALIGNMENT))
 #define XLAT_STR_1 STRINGIFY(BPF_F_ANY_ALIGNMENT)
 XLAT(BPF_F_TEST_RND_HI32),
 #define XLAT_VAL_2 ((unsigned) (BPF_F_TEST_RND_HI32))
 #define XLAT_STR_2 STRINGIFY(BPF_F_TEST_RND_HI32)
 XLAT(BPF_F_TEST_STATE_FREQ),
 #define XLAT_VAL_3 ((unsigned) (BPF_F_TEST_STATE_FREQ))
 #define XLAT_STR_3 STRINGIFY(BPF_F_TEST_STATE_FREQ)
 XLAT(BPF_F_SLEEPABLE),
 #define XLAT_VAL_4 ((unsigned) (BPF_F_SLEEPABLE))
 #define XLAT_STR_4 STRINGIFY(BPF_F_SLEEPABLE)
 XLAT(BPF_F_XDP_HAS_FRAGS),
 #define XLAT_VAL_5 ((unsigned) (BPF_F_XDP_HAS_FRAGS))
 #define XLAT_STR_5 STRINGIFY(BPF_F_XDP_HAS_FRAGS)
 XLAT(BPF_F_XDP_DEV_BOUND_ONLY),
 #define XLAT_VAL_6 ((unsigned) (BPF_F_XDP_DEV_BOUND_ONLY))
 #define XLAT_STR_6 STRINGIFY(BPF_F_XDP_DEV_BOUND_ONLY)
 XLAT(BPF_F_TEST_REG_INVARIANTS),
 #define XLAT_VAL_7 ((unsigned) (BPF_F_TEST_REG_INVARIANTS))
 #define XLAT_STR_7 STRINGIFY(BPF_F_TEST_REG_INVARIANTS)
};
static
const struct xlat bpf_prog_flags[1] = { {
 .data = bpf_prog_flags_xdata,
 .size = ARRAY_SIZE(bpf_prog_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
