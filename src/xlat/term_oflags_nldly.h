/* Generated by ./src/xlat/gen.sh from ./src/xlat/term_oflags_nldly.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat term_oflags_nldly in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data term_oflags_nldly_xdata[] = {
#if defined(NL0) || (defined(HAVE_DECL_NL0) && HAVE_DECL_NL0)
  XLAT(NL0),
 #define XLAT_VAL_0 ((unsigned) (NL0))
 #define XLAT_STR_0 STRINGIFY(NL0)
#endif
#if defined(NL1) || (defined(HAVE_DECL_NL1) && HAVE_DECL_NL1)
  XLAT(NL1),
 #define XLAT_VAL_1 ((unsigned) (NL1))
 #define XLAT_STR_1 STRINGIFY(NL1)
#endif
#if defined(NL2) || (defined(HAVE_DECL_NL2) && HAVE_DECL_NL2)
  XLAT(NL2),
 #define XLAT_VAL_2 ((unsigned) (NL2))
 #define XLAT_STR_2 STRINGIFY(NL2)
#endif
#if defined(NL3) || (defined(HAVE_DECL_NL3) && HAVE_DECL_NL3)
  XLAT(NL3),
 #define XLAT_VAL_3 ((unsigned) (NL3))
 #define XLAT_STR_3 STRINGIFY(NL3)
#endif
};
static
const struct xlat term_oflags_nldly[1] = { {
 .data = term_oflags_nldly_xdata,
 .size = ARRAY_SIZE(term_oflags_nldly_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
