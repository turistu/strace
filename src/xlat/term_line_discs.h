/* Generated by ./src/xlat/gen.sh from ./src/xlat/term_line_discs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(N_TTY) || (defined(HAVE_DECL_N_TTY) && HAVE_DECL_N_TTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_TTY) == (0), "N_TTY != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_TTY 0
#endif
#if defined(N_SLIP) || (defined(HAVE_DECL_N_SLIP) && HAVE_DECL_N_SLIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_SLIP) == (1), "N_SLIP != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_SLIP 1
#endif
#if defined(N_MOUSE) || (defined(HAVE_DECL_N_MOUSE) && HAVE_DECL_N_MOUSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_MOUSE) == (2), "N_MOUSE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_MOUSE 2
#endif
#if defined(N_PPP) || (defined(HAVE_DECL_N_PPP) && HAVE_DECL_N_PPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_PPP) == (3), "N_PPP != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_PPP 3
#endif
#if defined(N_STRIP) || (defined(HAVE_DECL_N_STRIP) && HAVE_DECL_N_STRIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_STRIP) == (4), "N_STRIP != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_STRIP 4
#endif
#if defined(N_AX25) || (defined(HAVE_DECL_N_AX25) && HAVE_DECL_N_AX25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_AX25) == (5), "N_AX25 != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_AX25 5
#endif
#if defined(N_X25) || (defined(HAVE_DECL_N_X25) && HAVE_DECL_N_X25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_X25) == (6), "N_X25 != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_X25 6
#endif
#if defined(N_6PACK) || (defined(HAVE_DECL_N_6PACK) && HAVE_DECL_N_6PACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_6PACK) == (7), "N_6PACK != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_6PACK 7
#endif
#if defined(N_MASC) || (defined(HAVE_DECL_N_MASC) && HAVE_DECL_N_MASC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_MASC) == (8), "N_MASC != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_MASC 8
#endif
#if defined(N_R3964) || (defined(HAVE_DECL_N_R3964) && HAVE_DECL_N_R3964)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_R3964) == (9), "N_R3964 != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_R3964 9
#endif
#if defined(N_PROFIBUS_FDL) || (defined(HAVE_DECL_N_PROFIBUS_FDL) && HAVE_DECL_N_PROFIBUS_FDL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_PROFIBUS_FDL) == (10), "N_PROFIBUS_FDL != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_PROFIBUS_FDL 10
#endif
#if defined(N_IRDA) || (defined(HAVE_DECL_N_IRDA) && HAVE_DECL_N_IRDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_IRDA) == (11), "N_IRDA != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_IRDA 11
#endif
#if defined(N_SMSBLOCK) || (defined(HAVE_DECL_N_SMSBLOCK) && HAVE_DECL_N_SMSBLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_SMSBLOCK) == (12), "N_SMSBLOCK != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_SMSBLOCK 12
#endif
#if defined(N_HDLC) || (defined(HAVE_DECL_N_HDLC) && HAVE_DECL_N_HDLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_HDLC) == (13), "N_HDLC != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_HDLC 13
#endif
#if defined(N_SYNC_PPP) || (defined(HAVE_DECL_N_SYNC_PPP) && HAVE_DECL_N_SYNC_PPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_SYNC_PPP) == (14), "N_SYNC_PPP != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_SYNC_PPP 14
#endif
#if defined(N_HCI) || (defined(HAVE_DECL_N_HCI) && HAVE_DECL_N_HCI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_HCI) == (15), "N_HCI != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_HCI 15
#endif
#if defined(N_GIGASET_M101) || (defined(HAVE_DECL_N_GIGASET_M101) && HAVE_DECL_N_GIGASET_M101)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_GIGASET_M101) == (16), "N_GIGASET_M101 != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_GIGASET_M101 16
#endif
#if defined(N_SLCAN) || (defined(HAVE_DECL_N_SLCAN) && HAVE_DECL_N_SLCAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_SLCAN) == (17), "N_SLCAN != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_SLCAN 17
#endif
#if defined(N_PPS) || (defined(HAVE_DECL_N_PPS) && HAVE_DECL_N_PPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_PPS) == (18), "N_PPS != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_PPS 18
#endif
#if defined(N_V253) || (defined(HAVE_DECL_N_V253) && HAVE_DECL_N_V253)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_V253) == (19), "N_V253 != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_V253 19
#endif
#if defined(N_CAIF) || (defined(HAVE_DECL_N_CAIF) && HAVE_DECL_N_CAIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_CAIF) == (20), "N_CAIF != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_CAIF 20
#endif
#if defined(N_GSM0710) || (defined(HAVE_DECL_N_GSM0710) && HAVE_DECL_N_GSM0710)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_GSM0710) == (21), "N_GSM0710 != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_GSM0710 21
#endif
#if defined(N_TI_WL) || (defined(HAVE_DECL_N_TI_WL) && HAVE_DECL_N_TI_WL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_TI_WL) == (22), "N_TI_WL != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_TI_WL 22
#endif
#if defined(N_TRACESINK) || (defined(HAVE_DECL_N_TRACESINK) && HAVE_DECL_N_TRACESINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_TRACESINK) == (23), "N_TRACESINK != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_TRACESINK 23
#endif
#if defined(N_TRACEROUTER) || (defined(HAVE_DECL_N_TRACEROUTER) && HAVE_DECL_N_TRACEROUTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_TRACEROUTER) == (24), "N_TRACEROUTER != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_TRACEROUTER 24
#endif
#if defined(N_NCI) || (defined(HAVE_DECL_N_NCI) && HAVE_DECL_N_NCI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_NCI) == (25), "N_NCI != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_NCI 25
#endif
#if defined(N_SPEAKUP) || (defined(HAVE_DECL_N_SPEAKUP) && HAVE_DECL_N_SPEAKUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_SPEAKUP) == (26), "N_SPEAKUP != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_SPEAKUP 26
#endif
#if defined(N_NULL) || (defined(HAVE_DECL_N_NULL) && HAVE_DECL_N_NULL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((N_NULL) == (27), "N_NULL != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define N_NULL 27
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat term_line_discs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data term_line_discs_xdata[] = {
 XLAT(N_TTY),
 #define XLAT_VAL_0 ((unsigned) (N_TTY))
 #define XLAT_STR_0 STRINGIFY(N_TTY)
 XLAT(N_SLIP),
 #define XLAT_VAL_1 ((unsigned) (N_SLIP))
 #define XLAT_STR_1 STRINGIFY(N_SLIP)
 XLAT(N_MOUSE),
 #define XLAT_VAL_2 ((unsigned) (N_MOUSE))
 #define XLAT_STR_2 STRINGIFY(N_MOUSE)
 XLAT(N_PPP),
 #define XLAT_VAL_3 ((unsigned) (N_PPP))
 #define XLAT_STR_3 STRINGIFY(N_PPP)
 XLAT(N_STRIP),
 #define XLAT_VAL_4 ((unsigned) (N_STRIP))
 #define XLAT_STR_4 STRINGIFY(N_STRIP)
 XLAT(N_AX25),
 #define XLAT_VAL_5 ((unsigned) (N_AX25))
 #define XLAT_STR_5 STRINGIFY(N_AX25)
 XLAT(N_X25),
 #define XLAT_VAL_6 ((unsigned) (N_X25))
 #define XLAT_STR_6 STRINGIFY(N_X25)
 XLAT(N_6PACK),
 #define XLAT_VAL_7 ((unsigned) (N_6PACK))
 #define XLAT_STR_7 STRINGIFY(N_6PACK)
 XLAT(N_MASC),
 #define XLAT_VAL_8 ((unsigned) (N_MASC))
 #define XLAT_STR_8 STRINGIFY(N_MASC)
 XLAT(N_R3964),
 #define XLAT_VAL_9 ((unsigned) (N_R3964))
 #define XLAT_STR_9 STRINGIFY(N_R3964)
 XLAT(N_PROFIBUS_FDL),
 #define XLAT_VAL_10 ((unsigned) (N_PROFIBUS_FDL))
 #define XLAT_STR_10 STRINGIFY(N_PROFIBUS_FDL)
 XLAT(N_IRDA),
 #define XLAT_VAL_11 ((unsigned) (N_IRDA))
 #define XLAT_STR_11 STRINGIFY(N_IRDA)
 XLAT(N_SMSBLOCK),
 #define XLAT_VAL_12 ((unsigned) (N_SMSBLOCK))
 #define XLAT_STR_12 STRINGIFY(N_SMSBLOCK)
 XLAT(N_HDLC),
 #define XLAT_VAL_13 ((unsigned) (N_HDLC))
 #define XLAT_STR_13 STRINGIFY(N_HDLC)
 XLAT(N_SYNC_PPP),
 #define XLAT_VAL_14 ((unsigned) (N_SYNC_PPP))
 #define XLAT_STR_14 STRINGIFY(N_SYNC_PPP)
 XLAT(N_HCI),
 #define XLAT_VAL_15 ((unsigned) (N_HCI))
 #define XLAT_STR_15 STRINGIFY(N_HCI)
 XLAT(N_GIGASET_M101),
 #define XLAT_VAL_16 ((unsigned) (N_GIGASET_M101))
 #define XLAT_STR_16 STRINGIFY(N_GIGASET_M101)
 XLAT(N_SLCAN),
 #define XLAT_VAL_17 ((unsigned) (N_SLCAN))
 #define XLAT_STR_17 STRINGIFY(N_SLCAN)
 XLAT(N_PPS),
 #define XLAT_VAL_18 ((unsigned) (N_PPS))
 #define XLAT_STR_18 STRINGIFY(N_PPS)
 XLAT(N_V253),
 #define XLAT_VAL_19 ((unsigned) (N_V253))
 #define XLAT_STR_19 STRINGIFY(N_V253)
 XLAT(N_CAIF),
 #define XLAT_VAL_20 ((unsigned) (N_CAIF))
 #define XLAT_STR_20 STRINGIFY(N_CAIF)
 XLAT(N_GSM0710),
 #define XLAT_VAL_21 ((unsigned) (N_GSM0710))
 #define XLAT_STR_21 STRINGIFY(N_GSM0710)
 XLAT(N_TI_WL),
 #define XLAT_VAL_22 ((unsigned) (N_TI_WL))
 #define XLAT_STR_22 STRINGIFY(N_TI_WL)
 XLAT(N_TRACESINK),
 #define XLAT_VAL_23 ((unsigned) (N_TRACESINK))
 #define XLAT_STR_23 STRINGIFY(N_TRACESINK)
 XLAT(N_TRACEROUTER),
 #define XLAT_VAL_24 ((unsigned) (N_TRACEROUTER))
 #define XLAT_STR_24 STRINGIFY(N_TRACEROUTER)
 XLAT(N_NCI),
 #define XLAT_VAL_25 ((unsigned) (N_NCI))
 #define XLAT_STR_25 STRINGIFY(N_NCI)
 XLAT(N_SPEAKUP),
 #define XLAT_VAL_26 ((unsigned) (N_SPEAKUP))
 #define XLAT_STR_26 STRINGIFY(N_SPEAKUP)
 XLAT(N_NULL),
 #define XLAT_VAL_27 ((unsigned) (N_NULL))
 #define XLAT_STR_27 STRINGIFY(N_NULL)
};
static
const struct xlat term_line_discs[1] = { {
 .data = term_line_discs_xdata,
 .size = ARRAY_SIZE(term_line_discs_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
