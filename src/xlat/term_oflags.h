/* Generated by ./src/xlat/gen.sh from ./src/xlat/term_oflags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#ifdef ALPHA
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat term_oflags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data term_oflags_xdata[] = {
#ifdef ALPHA
#if defined(XTABS) || (defined(HAVE_DECL_XTABS) && HAVE_DECL_XTABS)
  XLAT(XTABS),
 #define XLAT_VAL_0 ((unsigned) (XTABS))
 #define XLAT_STR_0 STRINGIFY(XTABS)
#endif
#endif

#if defined(OPOST) || (defined(HAVE_DECL_OPOST) && HAVE_DECL_OPOST)
  XLAT(OPOST),
 #define XLAT_VAL_1 ((unsigned) (OPOST))
 #define XLAT_STR_1 STRINGIFY(OPOST)
#endif
#if defined(OLCUC) || (defined(HAVE_DECL_OLCUC) && HAVE_DECL_OLCUC)
  XLAT(OLCUC),
 #define XLAT_VAL_2 ((unsigned) (OLCUC))
 #define XLAT_STR_2 STRINGIFY(OLCUC)
#endif
#if defined(ONLCR) || (defined(HAVE_DECL_ONLCR) && HAVE_DECL_ONLCR)
  XLAT(ONLCR),
 #define XLAT_VAL_3 ((unsigned) (ONLCR))
 #define XLAT_STR_3 STRINGIFY(ONLCR)
#endif
#if defined(OCRNL) || (defined(HAVE_DECL_OCRNL) && HAVE_DECL_OCRNL)
  XLAT(OCRNL),
 #define XLAT_VAL_4 ((unsigned) (OCRNL))
 #define XLAT_STR_4 STRINGIFY(OCRNL)
#endif
#if defined(ONOCR) || (defined(HAVE_DECL_ONOCR) && HAVE_DECL_ONOCR)
  XLAT(ONOCR),
 #define XLAT_VAL_5 ((unsigned) (ONOCR))
 #define XLAT_STR_5 STRINGIFY(ONOCR)
#endif
#if defined(ONLRET) || (defined(HAVE_DECL_ONLRET) && HAVE_DECL_ONLRET)
  XLAT(ONLRET),
 #define XLAT_VAL_6 ((unsigned) (ONLRET))
 #define XLAT_STR_6 STRINGIFY(ONLRET)
#endif
#if defined(OFILL) || (defined(HAVE_DECL_OFILL) && HAVE_DECL_OFILL)
  XLAT(OFILL),
 #define XLAT_VAL_7 ((unsigned) (OFILL))
 #define XLAT_STR_7 STRINGIFY(OFILL)
#endif
#if defined(OFDEL) || (defined(HAVE_DECL_OFDEL) && HAVE_DECL_OFDEL)
  XLAT(OFDEL),
 #define XLAT_VAL_8 ((unsigned) (OFDEL))
 #define XLAT_STR_8 STRINGIFY(OFDEL)
#endif

#if defined(PAGEOUT) || (defined(HAVE_DECL_PAGEOUT) && HAVE_DECL_PAGEOUT)
  XLAT(PAGEOUT),
 #define XLAT_VAL_9 ((unsigned) (PAGEOUT))
 #define XLAT_STR_9 STRINGIFY(PAGEOUT)
#endif
#if defined(WRAP) || (defined(HAVE_DECL_WRAP) && HAVE_DECL_WRAP)
  XLAT(WRAP),
 #define XLAT_VAL_10 ((unsigned) (WRAP))
 #define XLAT_STR_10 STRINGIFY(WRAP)
#endif
};
static
const struct xlat term_oflags[1] = { {
 .data = term_oflags_xdata,
 .size = ARRAY_SIZE(term_oflags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
