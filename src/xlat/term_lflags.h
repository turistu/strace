/* Generated by ./src/xlat/gen.sh from ./src/xlat/term_lflags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat term_lflags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data term_lflags_xdata[] = {
#if defined(ISIG) || (defined(HAVE_DECL_ISIG) && HAVE_DECL_ISIG)
  XLAT(ISIG),
 #define XLAT_VAL_0 ((unsigned) (ISIG))
 #define XLAT_STR_0 STRINGIFY(ISIG)
#endif
#if defined(ICANON) || (defined(HAVE_DECL_ICANON) && HAVE_DECL_ICANON)
  XLAT(ICANON),
 #define XLAT_VAL_1 ((unsigned) (ICANON))
 #define XLAT_STR_1 STRINGIFY(ICANON)
#endif
#if defined(XCASE) || (defined(HAVE_DECL_XCASE) && HAVE_DECL_XCASE)
  XLAT(XCASE),
 #define XLAT_VAL_2 ((unsigned) (XCASE))
 #define XLAT_STR_2 STRINGIFY(XCASE)
#endif
#if defined(ECHO) || (defined(HAVE_DECL_ECHO) && HAVE_DECL_ECHO)
  XLAT(ECHO),
 #define XLAT_VAL_3 ((unsigned) (ECHO))
 #define XLAT_STR_3 STRINGIFY(ECHO)
#endif
#if defined(ECHOE) || (defined(HAVE_DECL_ECHOE) && HAVE_DECL_ECHOE)
  XLAT(ECHOE),
 #define XLAT_VAL_4 ((unsigned) (ECHOE))
 #define XLAT_STR_4 STRINGIFY(ECHOE)
#endif
#if defined(ECHOK) || (defined(HAVE_DECL_ECHOK) && HAVE_DECL_ECHOK)
  XLAT(ECHOK),
 #define XLAT_VAL_5 ((unsigned) (ECHOK))
 #define XLAT_STR_5 STRINGIFY(ECHOK)
#endif
#if defined(ECHONL) || (defined(HAVE_DECL_ECHONL) && HAVE_DECL_ECHONL)
  XLAT(ECHONL),
 #define XLAT_VAL_6 ((unsigned) (ECHONL))
 #define XLAT_STR_6 STRINGIFY(ECHONL)
#endif
#if defined(NOFLSH) || (defined(HAVE_DECL_NOFLSH) && HAVE_DECL_NOFLSH)
  XLAT(NOFLSH),
 #define XLAT_VAL_7 ((unsigned) (NOFLSH))
 #define XLAT_STR_7 STRINGIFY(NOFLSH)
#endif
#if defined(IEXTEN) || (defined(HAVE_DECL_IEXTEN) && HAVE_DECL_IEXTEN)
  XLAT(IEXTEN),
 #define XLAT_VAL_8 ((unsigned) (IEXTEN))
 #define XLAT_STR_8 STRINGIFY(IEXTEN)
#endif
#if defined(ECHOCTL) || (defined(HAVE_DECL_ECHOCTL) && HAVE_DECL_ECHOCTL)
  XLAT(ECHOCTL),
 #define XLAT_VAL_9 ((unsigned) (ECHOCTL))
 #define XLAT_STR_9 STRINGIFY(ECHOCTL)
#endif
#if defined(ECHOPRT) || (defined(HAVE_DECL_ECHOPRT) && HAVE_DECL_ECHOPRT)
  XLAT(ECHOPRT),
 #define XLAT_VAL_10 ((unsigned) (ECHOPRT))
 #define XLAT_STR_10 STRINGIFY(ECHOPRT)
#endif
#if defined(ECHOKE) || (defined(HAVE_DECL_ECHOKE) && HAVE_DECL_ECHOKE)
  XLAT(ECHOKE),
 #define XLAT_VAL_11 ((unsigned) (ECHOKE))
 #define XLAT_STR_11 STRINGIFY(ECHOKE)
#endif
#if defined(FLUSHO) || (defined(HAVE_DECL_FLUSHO) && HAVE_DECL_FLUSHO)
  XLAT(FLUSHO),
 #define XLAT_VAL_12 ((unsigned) (FLUSHO))
 #define XLAT_STR_12 STRINGIFY(FLUSHO)
#endif
#if defined(PENDIN) || (defined(HAVE_DECL_PENDIN) && HAVE_DECL_PENDIN)
  XLAT(PENDIN),
 #define XLAT_VAL_13 ((unsigned) (PENDIN))
 #define XLAT_STR_13 STRINGIFY(PENDIN)
#endif
#if defined(TOSTOP) || (defined(HAVE_DECL_TOSTOP) && HAVE_DECL_TOSTOP)
  XLAT(TOSTOP),
 #define XLAT_VAL_14 ((unsigned) (TOSTOP))
 #define XLAT_STR_14 STRINGIFY(TOSTOP)
#endif
#if defined(EXTPROC) || (defined(HAVE_DECL_EXTPROC) && HAVE_DECL_EXTPROC)
  XLAT(EXTPROC),
 #define XLAT_VAL_15 ((unsigned) (EXTPROC))
 #define XLAT_STR_15 STRINGIFY(EXTPROC)
#endif

#if defined(DEFECHO) || (defined(HAVE_DECL_DEFECHO) && HAVE_DECL_DEFECHO)
  XLAT(DEFECHO),
 #define XLAT_VAL_16 ((unsigned) (DEFECHO))
 #define XLAT_STR_16 STRINGIFY(DEFECHO)
#endif
};
static
const struct xlat term_lflags[1] = { {
 .data = term_lflags_xdata,
 .size = ARRAY_SIZE(term_lflags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
