/* Generated by ./src/xlat/gen.sh from ./src/xlat/nl_attr_type.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nl_attr_type in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nl_attr_type_xdata[] = {

 [NL_ATTR_TYPE_INVALID] = XLAT(NL_ATTR_TYPE_INVALID),
 #define XLAT_VAL_0 ((unsigned) (NL_ATTR_TYPE_INVALID))
 #define XLAT_STR_0 STRINGIFY(NL_ATTR_TYPE_INVALID)

 [NL_ATTR_TYPE_FLAG] = XLAT(NL_ATTR_TYPE_FLAG),
 #define XLAT_VAL_1 ((unsigned) (NL_ATTR_TYPE_FLAG))
 #define XLAT_STR_1 STRINGIFY(NL_ATTR_TYPE_FLAG)

 [NL_ATTR_TYPE_U8] = XLAT(NL_ATTR_TYPE_U8),
 #define XLAT_VAL_2 ((unsigned) (NL_ATTR_TYPE_U8))
 #define XLAT_STR_2 STRINGIFY(NL_ATTR_TYPE_U8)
 [NL_ATTR_TYPE_U16] = XLAT(NL_ATTR_TYPE_U16),
 #define XLAT_VAL_3 ((unsigned) (NL_ATTR_TYPE_U16))
 #define XLAT_STR_3 STRINGIFY(NL_ATTR_TYPE_U16)
 [NL_ATTR_TYPE_U32] = XLAT(NL_ATTR_TYPE_U32),
 #define XLAT_VAL_4 ((unsigned) (NL_ATTR_TYPE_U32))
 #define XLAT_STR_4 STRINGIFY(NL_ATTR_TYPE_U32)
 [NL_ATTR_TYPE_U64] = XLAT(NL_ATTR_TYPE_U64),
 #define XLAT_VAL_5 ((unsigned) (NL_ATTR_TYPE_U64))
 #define XLAT_STR_5 STRINGIFY(NL_ATTR_TYPE_U64)

 [NL_ATTR_TYPE_S8] = XLAT(NL_ATTR_TYPE_S8),
 #define XLAT_VAL_6 ((unsigned) (NL_ATTR_TYPE_S8))
 #define XLAT_STR_6 STRINGIFY(NL_ATTR_TYPE_S8)
 [NL_ATTR_TYPE_S16] = XLAT(NL_ATTR_TYPE_S16),
 #define XLAT_VAL_7 ((unsigned) (NL_ATTR_TYPE_S16))
 #define XLAT_STR_7 STRINGIFY(NL_ATTR_TYPE_S16)
 [NL_ATTR_TYPE_S32] = XLAT(NL_ATTR_TYPE_S32),
 #define XLAT_VAL_8 ((unsigned) (NL_ATTR_TYPE_S32))
 #define XLAT_STR_8 STRINGIFY(NL_ATTR_TYPE_S32)
 [NL_ATTR_TYPE_S64] = XLAT(NL_ATTR_TYPE_S64),
 #define XLAT_VAL_9 ((unsigned) (NL_ATTR_TYPE_S64))
 #define XLAT_STR_9 STRINGIFY(NL_ATTR_TYPE_S64)

 [NL_ATTR_TYPE_BINARY] = XLAT(NL_ATTR_TYPE_BINARY),
 #define XLAT_VAL_10 ((unsigned) (NL_ATTR_TYPE_BINARY))
 #define XLAT_STR_10 STRINGIFY(NL_ATTR_TYPE_BINARY)
 [NL_ATTR_TYPE_STRING] = XLAT(NL_ATTR_TYPE_STRING),
 #define XLAT_VAL_11 ((unsigned) (NL_ATTR_TYPE_STRING))
 #define XLAT_STR_11 STRINGIFY(NL_ATTR_TYPE_STRING)
 [NL_ATTR_TYPE_NUL_STRING] = XLAT(NL_ATTR_TYPE_NUL_STRING),
 #define XLAT_VAL_12 ((unsigned) (NL_ATTR_TYPE_NUL_STRING))
 #define XLAT_STR_12 STRINGIFY(NL_ATTR_TYPE_NUL_STRING)

 [NL_ATTR_TYPE_NESTED] = XLAT(NL_ATTR_TYPE_NESTED),
 #define XLAT_VAL_13 ((unsigned) (NL_ATTR_TYPE_NESTED))
 #define XLAT_STR_13 STRINGIFY(NL_ATTR_TYPE_NESTED)
 [NL_ATTR_TYPE_NESTED_ARRAY] = XLAT(NL_ATTR_TYPE_NESTED_ARRAY),
 #define XLAT_VAL_14 ((unsigned) (NL_ATTR_TYPE_NESTED_ARRAY))
 #define XLAT_STR_14 STRINGIFY(NL_ATTR_TYPE_NESTED_ARRAY)

 [NL_ATTR_TYPE_BITFIELD32] = XLAT(NL_ATTR_TYPE_BITFIELD32),
 #define XLAT_VAL_15 ((unsigned) (NL_ATTR_TYPE_BITFIELD32))
 #define XLAT_STR_15 STRINGIFY(NL_ATTR_TYPE_BITFIELD32)

 [NL_ATTR_TYPE_SINT] = XLAT(NL_ATTR_TYPE_SINT),
 #define XLAT_VAL_16 ((unsigned) (NL_ATTR_TYPE_SINT))
 #define XLAT_STR_16 STRINGIFY(NL_ATTR_TYPE_SINT)
 [NL_ATTR_TYPE_UINT] = XLAT(NL_ATTR_TYPE_UINT),
 #define XLAT_VAL_17 ((unsigned) (NL_ATTR_TYPE_UINT))
 #define XLAT_STR_17 STRINGIFY(NL_ATTR_TYPE_UINT)
};
static
const struct xlat nl_attr_type[1] = { {
 .data = nl_attr_type_xdata,
 .size = ARRAY_SIZE(nl_attr_type_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
